{"version":3,"sources":["../src/main.ts","../src/main/config/app.ts","../src/main/middlewares/body-parser.ts","../src/main/middlewares/content-type.ts","../src/main/middlewares/cors.ts","../src/main/config/middlewares.ts","../src/main/config/routes.ts","../src/main/adapters/express-route-adapter.ts","../src/infra/database/Prisma.ts","../src/infra/db/postgresdb/buscar-todos-funcionarios.ts/buscas-todos-repository.ts","../src/presentation/errors/server-error.ts","../src/presentation/helpers/http-helpers.ts","../src/presentation/controllers/buscar-todos-funcionarios/buscar-todos-controller.ts","../src/main/decorators/log.ts","../src/main/factories/buscar-todos-funcionarios.ts","../src/main/routes/horarios/buscar-todos-funcionarios-routes.ts","../src/infra/db/postgresdb/atestado-repository/atestado-repository.ts","../src/presentation/errors/Funcionario-param-error.ts","../src/presentation/controllers/cadastrar-atestado/cadastrar-atestado.ts","../src/main/factories/cadastrar-atestado.ts","../src/main/routes/horarios/cadastrar-atestado.ts","../src/infra/db/postgresdb/calcular-resumo/utils.ts","../src/infra/db/postgresdb/calcular-resumo/calcular-resumo-repository.ts","../src/presentation/controllers/calcular-resumo/carcular-resumo-controller.ts","../src/main/factories/calcular-resumo.ts","../src/main/routes/horarios/calcular-resumo-routes.ts","../src/infra/db/postgresdb/eventos/eventos-repository.ts","../src/infra/db/postgresdb/eventos/utils.ts","../src/infra/db/postgresdb/eventos/intervaloEntrePeriodos.ts","../src/infra/db/postgresdb/eventos/adicionalNoturno.ts","../src/presentation/controllers/eventos/eventos-controller.ts","../src/main/factories/criar-eventos.ts","../src/main/routes/horarios/criar-eventos.ts","../src/data/usecase/delete-cartao/db-add-dele-cartoa.ts","../src/infra/db/postgresdb/delete-cartao-repository/delete-cartao-repository.ts","../src/presentation/controllers/delete-cartao/delete-cartao-controller.ts","../src/main/factories/delete-cartao.ts","../src/main/routes/horarios/delete-cartao-routes.ts","../src/data/usecase/delete-dia-horarios/db-add-delete.ts","../src/infra/db/postgresdb/delete-dia-horario-repository/delete-dia-horario-repository.ts","../src/presentation/controllers/deletar/delete-dia-horarios-controller.ts","../src/main/factories/delete-dia-horario-factore.ts","../src/main/routes/horarios/delete-dia-horarios-routes.ts","../src/main/expotações-demitidos/exportar-dados.ts","../src/presentation/controllers/exportar-demitidos/exportar-lancamentos.ts","../src/main/routes/horarios/export-demitidos-routes.ts","../src/main/exportacoes-geral/exportar-dados.ts","../src/presentation/controllers/exportar-arquivos-geral/exporatar-lancamentos.ts","../src/main/routes/horarios/export-geral-routes.ts","../src/infra/db/postgresdb/get-funcionario/get-funcionario.ts","../src/presentation/controllers/procurar-funcionário/procurar-funcionário.ts","../src/main/factories/get-funcionario.ts","../src/main/routes/horarios/get-funcionario-routes.ts","../src/infra/db/postgresdb/lancar-dia/lancar-dia.ts","../src/presentation/controllers/lancar-dia/lancar-dia.ts","../src/main/factories/lancar-dia.ts","../src/main/routes/horarios/lancar-dia-routes.ts","../src/infra/db/postgresdb/listar-atestados/listar-atestados.ts","../src/presentation/controllers/listar-atestados/listar-atestados-controler.ts","../src/main/factories/listar-atestados.ts","../src/main/routes/horarios/listar-atestados-routes.ts","../src/infra/db/postgresdb/listar-descricacao-repository/listar-descricacao-repository.ts","../src/presentation/controllers/listar-descricacao/listar-descricacao-controler.ts","../src/main/factories/listar-descricacao.ts","../src/main/routes/horarios/listar-descricacao-routes.ts","../src/infra/db/postgresdb/listar-filial-repository/listar-status-lancamento-repository.ts","../src/presentation/controllers/listar-filial/listar-filial-controller.ts","../src/main/factories/listar-filial.ts","../src/main/routes/horarios/listar-filial-routes.ts","../src/infra/db/postgresdb/listar-ocorrencias-geral/listar-ocorrencias-repository.ts","../src/presentation/controllers/listar-ocorrencia-geral/listar-ocorrencia-geral-controler.ts","../src/main/factories/listar-ocorrencia-geral.ts","../src/main/routes/horarios/listar-ocorrencia-geral-routes.ts","../src/infra/db/postgresdb/listar-ocorrencias/listar-ocorrencias-repository.ts","../src/presentation/controllers/listar-ocorrencia/listar-ocorrencia-controler.ts","../src/main/factories/listar-ocorrencia.ts","../src/main/routes/horarios/listar-ocorrencia-routes.ts","../src/infra/db/postgresdb/listar-solucoes-eventos/listar-solucoes-eventos.ts","../src/presentation/controllers/listar-solucoes-eventos/listar-solucoes-eventos-controller.ts","../src/main/factories/listar-solucoes-eventos.ts","../src/main/routes/horarios/listar-solucoes-eventos-routes.ts","../src/infra/db/postgresdb/procurar-localidades/procurar-localidades.ts","../src/presentation/controllers/procurar-localidades/procurar-localidades.ts","../src/main/factories/procurar-localidade.ts","../src/main/routes/horarios/procurar-localidade-routes.ts","../src/infra/db/postgresdb/retorno-solucao/retorno-solucao-repository.ts","../src/presentation/controllers/retornar-solucao/retornar-solucao-controller.ts","../src/main/factories/retornar-solucao.ts","../src/main/routes/horarios/retornar-solucao-routes.ts","../src/infra/db/postgresdb/solucao-eventos-repository/solucao-eventos-repository.ts","../src/presentation/controllers/solucao-eventos/solucao-eventos-controller.ts","../src/main/factories/solucao-eventos.ts","../src/main/routes/horarios/solucao-eventos-routes.ts","../src/main/routes/horarios/upload-routes-routes.ts","../src/main/adapters/protheus-route-adapter.ts","../src/infra/db/postgresdb/afastamento/afastamento -repository.ts","../src/infra/db/postgresdb/funcionario/cartao-repository.ts","../src/infra/db/postgresdb/funcionario/funcionario-repository.ts","../src/infra/db/postgresdb/grupo-trabalho/grupo-trabalho-repository.ts","../src/presentation/controllers/procurar-funcionário/utils.ts"],"sourcesContent":["import \"dotenv/config\";\r\nimport app from \"./main/config/app\";\r\n\r\napp.listen(Number(process.env.PORT), \"0.0.0.0\", () => console.log(`Server rodando em http://localhost:${process.env.PORT}`));\r\n","import cors from \"cors\";\r\nimport Express from \"express\";\r\n\r\nimport setupMiddlewares from \"./middlewares\";\r\nimport { setupRoutes } from \"./routes\";\r\n\r\nconst app = Express();\r\napp.use(cors());\r\nsetupMiddlewares(app);\r\nsetupRoutes(app);\r\nexport default app;\r\n","import { json } from \"express\";\r\n\r\nexport const bodyParser = json();\r\n","import { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const contentType = (req: Request, res: Response, next: NextFunction): void => {\r\n  res.type(\"json\");\r\n\r\n  next();\r\n};\r\n","import { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const cors = (req: Request, res: Response, next: NextFunction): void => {\r\n  res.set(\"access-control-allow-origin\", \"*\");\r\n  res.set(\"access-control-allow-methods\", \"*\");\r\n  res.set(\"access-control-allow-headers\", \"*\");\r\n  next();\r\n};\r\n","import { Express } from \"express\";\r\n\r\nimport { bodyParser, contentType,cors } from \"../middlewares\";\r\n\r\nexport default (app: Express): void => {\r\n  app.use(bodyParser);\r\n  app.use(cors);\r\n  app.use(contentType);\r\n};\r\n","import { Express, Router } from \"express\";\r\n\r\nimport todosfuncionarios from \"../routes/horarios/buscar-todos-funcionarios-routes\";\r\nimport cadastrarAtestado from \"../routes/horarios/cadastrar-atestado\";\r\nimport calcularresumo from \"../routes/horarios/calcular-resumo-routes\";\r\nimport eventos from \"../routes/horarios/criar-eventos\";\r\nimport deletecartao from \"../routes/horarios/delete-cartao-routes\";\r\nimport deletar from \"../routes/horarios/delete-dia-horarios-routes\";\r\nimport exportarDemitidoslancamentos from \"../routes/horarios/export-demitidos-routes\";\r\nimport exportarlancamentos from \"../routes/horarios/export-geral-routes\";\r\nimport funcionario from \"../routes/horarios/get-funcionario-routes\";\r\nimport lancarDia from \"../routes/horarios/lancar-dia-routes\";\r\nimport listarAtestado from \"../routes/horarios/listar-atestados-routes\";\r\nimport descricacao from \"../routes/horarios/listar-descricacao-routes\";\r\nimport listarFilial from \"../routes/horarios/listar-filial-routes\";\r\nimport ocorrenciageral from \"../routes/horarios/listar-ocorrencia-geral-routes\";\r\nimport ocorrencia from \"../routes/horarios/listar-ocorrencia-routes\";\r\nimport tipoevento from \"../routes/horarios/listar-solucoes-eventos-routes\";\r\nimport procurarLocalidade from \"../routes/horarios/procurar-localidade-routes\";\r\nimport retornarsolucao from \"../routes/horarios/retornar-solucao-routes\";\r\nimport solucaoeventos from \"../routes/horarios/solucao-eventos-routes\";\r\nimport upload from \"../routes/horarios/upload-routes-routes\";\r\n\r\nexport const setupRoutes = (app: Express): void => {\r\n  const router = Router();\r\n  app.use(\"/api\", router);\r\n  upload(router);\r\n  deletar(router);\r\n  funcionario(router);\r\n  todosfuncionarios(router);\r\n  lancarDia(router);\r\n  procurarLocalidade(router);\r\n  deletecartao(router);\r\n  ocorrencia(router);\r\n  exportarlancamentos(router);\r\n  exportarDemitidoslancamentos(router);\r\n  descricacao(router);\r\n  cadastrarAtestado(router);\r\n  listarAtestado(router);\r\n  eventos(router);\r\n  solucaoeventos(router);\r\n  tipoevento(router);\r\n  ocorrenciageral(router);\r\n  calcularresumo(router);\r\n  retornarsolucao(router);\r\n  listarFilial(router);\r\n};\r\n","import { Request, Response } from \"express\";\r\n\r\nimport { Controller } from \"../../presentation/protocols/controller\";\r\nimport { HttpRequest } from \"../../presentation/protocols/http\";\r\n\r\nexport const adaptRoute = (controller: Controller) => {\r\n  return async (req: Request, res: Response) => {\r\n    const HttpRequest: HttpRequest = {\r\n      body: req.body,\r\n      query: req.query,\r\n      params: req.params,\r\n    };\r\n    const httpResponse = await controller.handle(HttpRequest);\r\n    res.status(httpResponse.statusCode).json(httpResponse.body);\r\n  };\r\n};\r\n","import { Prisma, PrismaClient } from \"@prisma/client\";\r\n\r\nexport const prisma = new PrismaClient();\r\nexport type prismaPromise = Prisma.PrismaPromise<any>;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { BuscraTodosRepository } from \"../../../../data/usecase/buscar-todos-funcionários/add-buscar-todos-funcionarios\";\r\nimport { GetTodosFuncionariosModel } from \"../../../../domain/models/buscar-todos-funcionarios\";\r\nimport { BuscarTodosFuncionarios } from \"../../../../presentation/controllers/buscar-todos-funcionarios/buscar-todos-protocols\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class BuscarTodosPostgresRepository implements BuscraTodosRepository {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async listAll(funcionarioData: BuscarTodosFuncionarios): Promise<GetTodosFuncionariosModel[]> {\r\n    try {\r\n      const funcionarios = await this.prisma.funcionario.findMany({\r\n        include: {\r\n          turno: true, // Inclui a tabela 'turno' nos resultados\r\n          localidade: true,\r\n          centro_custo: true,\r\n          funcao: true,\r\n          contatos: true,\r\n          emails: true,\r\n          endereco: true,\r\n          afastamento: {\r\n            include: { funcionarios_afastados_status: true}\r\n          }\r\n        },\r\n        where: {\r\n          identificacao: { endsWith: funcionarioData.identificacao },\r\n          localidadeId: funcionarioData.localidade?.codigo,\r\n        },\r\n      });\r\n\r\n      // Mapeia os resultados para incluir periodoDeTrabalho com o campo renomeado\r\n      return funcionarios.map((funcionario) => ({\r\n        ...funcionario,\r\n        periodoDeTrabalho: {\r\n          id: funcionario.turno.id,\r\n          descricaoDoTurno: funcionario.turno.nome, // Renomeia o campo 'nome' para 'periodo'\r\n        },\r\n        turno: undefined, // Remove o campo turno original\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar funcionários\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","export class ServerError extends Error {\r\n  constructor() {\r\n    super(\"Erro do servidor interno\");\r\n    this.name = \"ServerError\";\r\n  }\r\n}\r\n","import { HttpResponse } from \"../protocols/http\";\r\nimport { ServerError } from \"../errors/server-error\";\r\n\r\nexport const badRequest = (error: Error): HttpResponse => ({\r\n  statusCode: 400,\r\n  body: error,\r\n});\r\n\r\nexport const notFoundRequest = (error: Error): HttpResponse => ({\r\n  statusCode: 404,\r\n  body: error,\r\n});\r\n\r\nexport const serverError = (): HttpResponse => ({\r\n  statusCode: 500,\r\n  body: new ServerError(),\r\n});\r\n\r\nexport const ok = (data: any): HttpResponse => ({\r\n  statusCode: 200,\r\n  body: data,\r\n});\r\n\r\n/* const sendError = (message: string, error: \"Bad Request\" | \"Not Found\" | \"Server Error\"): HttpResponse => {\r\n  const output: HttpResponse;\r\n};\r\n */\r\n","import { BuscarTodosPostgresRepository } from \"../../../infra/db/postgresdb/buscar-todos-funcionarios.ts/buscas-todos-repository\";\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./buscar-todos-protocols\";\r\n\r\nexport class BuscarTodosFuncionarioController implements Controller {\r\n  constructor(private readonly funcionarioPostgresRepository: BuscarTodosPostgresRepository) {}\r\n\r\n  async handle(req: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { localidade, identificacao } = req.query;\r\n\r\n      const funcionarios = await this.funcionarioPostgresRepository.listAll({\r\n        identificacao,\r\n        localidade: { codigo: localidade },\r\n      });\r\n\r\n      // Retorna um array contendo todos os funcionários juntamente com a mensagem\r\n      return ok({ message: \"Funcionários encontrados com sucesso\", data: funcionarios });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { Controller, HttpRequest, HttpResponse } from \"../../presentation/protocols\";\r\n\r\nexport class LogControllerDecorator implements Controller {\r\n  private readonly controller: Controller;\r\n\r\n  constructor(controller: Controller) {\r\n    this.controller = controller;\r\n  }\r\n  async handle(httRequest: HttpRequest): Promise<HttpResponse> {\r\n    const httPResponse = await this.controller.handle(httRequest);\r\n    return httPResponse;\r\n  }\r\n}\r\n","import { BuscarTodosPostgresRepository } from \"../../infra/db/postgresdb/buscar-todos-funcionarios.ts/buscas-todos-repository\";\r\nimport { BuscarTodosFuncionarioController } from \"../../presentation/controllers/buscar-todos-funcionarios/buscar-todos-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeBuscarTodosController = (): Controller => {\r\n  const buscarTodosPostgresRepository = new BuscarTodosPostgresRepository();\r\n  const buscarTodosFuncionarioController = new BuscarTodosFuncionarioController(buscarTodosPostgresRepository);\r\n  return new LogControllerDecorator(buscarTodosFuncionarioController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeBuscarTodosController } from \"../../factories/buscar-todos-funcionarios\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/todosfuncionario\", adaptRoute(makeBuscarTodosController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { AddAtestado, AddAtestadoModel } from \"../../../../domain/usecases/add-atestado\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class AtestadoRepository implements AddAtestado {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async add(input: AddAtestadoModel): Promise<boolean> {\r\n    try {\r\n      const savedAtestado = await this.prisma.atestado_funcionario.create({\r\n        data: {\r\n          inicio: input.inicio,\r\n          fim: input.fim,\r\n          descricao: input.descricao,\r\n          userName: input.userName,\r\n          acidente_trabalho: false,\r\n          proprio: false,\r\n          observacao: input.observacao,\r\n          idade_paciente: input.idade_paciente,\r\n          grupo_cid: input.grupo_cid,\r\n          tipoAcompanhanteId: input.tipoAcompanhanteId,\r\n          funcionarioId: input.funcionarioId,\r\n          ocupacaoId: input.ocupacaoId,\r\n          tipoId: input.tipoId,\r\n          statusId: 1,\r\n\r\n\r\n          // funcionario: { connect: { id: input.funcionarioId } },\r\n          // tipos_documentos: { connect: { id: input.tipoId } },\r\n          // tipo_ocupacao: { connect: { id: input.ocupacaoId } },\r\n          // tipo_status: { connect: { id: 1 } },\r\n        },\r\n      });\r\n\r\n      return !!savedAtestado;\r\n    } catch (error) {\r\n      console.error(\"Erro ao criar atestado:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/*    public async addLancamentos(input: AddAtestadoModel): Promise<{ atestadoSalvo: boolean; lancamentos: any[] }> {\r\n    try {\r\n      const lancamentos = await this.prisma.cartao_dia_lancamento.findMany({\r\n        where: {\r\n          cartao_dia: {\r\n            data: input.data,\r\n          },\r\n        },\r\n        include: {\r\n          cartao_dia: true,\r\n        },\r\n      });\r\n\r\n      const savedAtestado = await this.prisma.atestado_funcionario.create({\r\n        data: {\r\n          inicio: input.inicio,\r\n          fim: input.fim,\r\n          descricao: input.descricao,\r\n          userName: input.userName,\r\n          acidente_trabalho: false,\r\n          proprio: false,\r\n          funcionario: { connect: { identificacao: input.identificacao } },\r\n          tipos_documentos: { connect: { id: input.tipoId } },\r\n          tipo_ocupacao: { connect: { id: input.ocupacaoId } },\r\n          tipo_acompanhante: { connect: { id: input.tipoAcompanhanteId } },\r\n        },\r\n      });\r\n\r\n      return { atestadoSalvo: !!savedAtestado, lancamentos };\r\n    } catch (error) {\r\n      console.error(\"Erro ao criar atestado:\", error);\r\n      return { atestadoSalvo: false, lancamentos: [] };\r\n    }\r\n  }\r\n}\r\n*/\r\n","export class FuncionarioParamError extends Error {\r\n  constructor(paramName: string) {\r\n    super();\r\n    this.name = paramName;\r\n  }\r\n}\r\n","import { AtestadoRepository } from \"@infra/db/postgresdb/atestado-repository/atestado-repository\";\r\n\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./cadastrar-atestado-protocols\";\r\n\r\nexport class AtestadoController implements Controller {\r\n  constructor(private readonly atestadoRepository: AtestadoRepository) {}\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const {\r\n        inicio,\r\n        fim,\r\n        grupo_cid,\r\n        descricao,\r\n        userName,\r\n        funcionarioId,\r\n        tipoId,\r\n        ocupacaoId,\r\n        tipoAcompanhanteId,\r\n        idade_paciente,\r\n        acidente_trabalho,\r\n        proprio,\r\n        aprovado,\r\n        observacao,\r\n        statusId,\r\n      } = httpRequest.body;\r\n\r\n      if (!inicio) return badRequest(new FuncionarioParamError(\"Falta inicio dio atestado!\"));\r\n      if (!fim) return badRequest(new FuncionarioParamError(\"Falta fim do atestado!\"));\r\n      if (!userName) return badRequest(new FuncionarioParamError(\"Falta Usuário!\"));\r\n      if (!tipoId) return badRequest(new FuncionarioParamError(\"Falta o tipo do atestado!\"));\r\n      if (!funcionarioId) return badRequest(new FuncionarioParamError(\"Falta funcionárioId!\"));\r\n      if (!observacao) return badRequest(new FuncionarioParamError(\"Falta observação!\"));\r\n\r\n      const atestadoSalvo = await this.atestadoRepository.add({\r\n        inicio,\r\n        fim,\r\n        grupo_cid,\r\n        descricao,\r\n        userName,\r\n        funcionarioId,\r\n        tipoId,\r\n        ocupacaoId,\r\n        tipoAcompanhanteId,\r\n        idade_paciente,\r\n        acidente_trabalho,\r\n        proprio,\r\n        observacao,\r\n        statusId,\r\n      });\r\n\r\n      if (!atestadoSalvo) throw \"Erro ao salvar atestado!\";\r\n\r\n      return ok({ message: \"Atestado salvo com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { AtestadoRepository } from \"@infra/db/postgresdb/atestado-repository/atestado-repository\";\r\n\r\nimport { AtestadoController } from \"../../presentation/controllers/cadastrar-atestado/cadastrar-atestado\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeCadastrarAtestadosController = (): Controller => {\r\n  const atestadoRepository = new AtestadoRepository();\r\n  const atestadoController = new AtestadoController(atestadoRepository);\r\n  return new LogControllerDecorator(atestadoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeCadastrarAtestadosController } from \"../../factories/cadastrar-atestado\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/cadastrar-atestado\", adaptRoute(makeCadastrarAtestadosController()));\r\n};\r\n\r\nexport default route;\r\n","import moment from \"moment\";\r\n\r\nexport function calcularTotalMinutos(entrada: string, saida: string, extra?: string): number {\r\n  const [entradaHoras, entradaMinutos] = entrada.split(\":\").map(Number);\r\n  const [saidaHoras, saidaMinutos] = saida.split(\":\").map(Number);\r\n\r\n  let totalMinutosEntrada = entradaHoras * 60 + entradaMinutos;\r\n  let totalMinutosSaida = saidaHoras * 60 + saidaMinutos;\r\n\r\n  if (extra && extra !== \"\") {\r\n    const [extraHoras, extraMinutos] = extra.split(\":\").map(Number);\r\n    totalMinutosSaida += extraHoras * 60 + extraMinutos;\r\n  }\r\n  return totalMinutosSaida - totalMinutosEntrada;\r\n}\r\n\r\nexport function arredondarParteDecimalHoras(numero: number): number {\r\n  const parteInteira = Math.trunc(numero); // Obtém a parte inteira do número\r\n  const decimalParte = Math.abs(numero - parteInteira); // Obtém a parte decimal do número\r\n\r\n  // Verifica se a parte decimal é maior ou igual a 0.6\r\n  if (decimalParte >= 0.6) {\r\n    // Arredonda para cima o número inteiro\r\n    return numero > 0 ? Math.ceil(numero) : Math.ceil(numero) - 1;\r\n  } else {\r\n    // Arredonda para baixo o número inteiro\r\n    return parteInteira;\r\n  }\r\n}\r\n\r\nexport function arredondarParteDecimal(numero: number): number {\r\n  const inteiro = Math.floor(numero); // Obtém a parte inteira do número\r\n  const decimal = numero - inteiro; // Obtém a parte decimal do número\r\n\r\n  // Se a parte decimal for maior ou igual a 0.6, arredonde para cima\r\n  if (decimal >= 0.6) {\r\n    return inteiro + 1; // Adiciona 1 para arredondar para cima\r\n  } else {\r\n    return inteiro; // Mantém o inteiro, arredondando para baixo\r\n  }\r\n}\r\n\r\nexport const BuscarHorarioNortunoEmMinutos = (data: moment.Moment, inicial: moment.Moment, final: moment.Moment): number => {\r\n  let difMinNotuno = 0;\r\n  const inicioAdicional = moment(data).utc(false).minutes(0).seconds(0).hour(22);\r\n  const finalAdicional = moment(data).utc(false).minutes(0).seconds(0).add(1, \"d\").hour(5);\r\n\r\n  //Quando Entrada e saida estão no adicional\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional)) {\r\n    if (inicial.isAfter(inicioAdicional)) {\r\n      if (final.isBefore(finalAdicional)) {\r\n        difMinNotuno = final.diff(inicial, \"minutes\");\r\n      }\r\n    }\r\n  }\r\n\r\n  //Quando a saida está entre o adicional e a entrada está antes\r\n  if (final.isBetween(inicioAdicional, finalAdicional) && inicial?.isBefore(inicioAdicional)) {\r\n    difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  //Quando a entrada está entre o adicional e a saida depois\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional) && final?.isAfter(finalAdicional)) {\r\n    difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n  }\r\n\r\n  //Quando inicio e final do adicional estão entre entrada e saida e entrada é antes do inicio do adicional e a saída é depois do fim do adicional\r\n  if (\r\n    inicioAdicional.isBetween(inicial, final) &&\r\n    finalAdicional.isBetween(inicial, final) &&\r\n    inicial.isBefore(inicioAdicional) &&\r\n    final.isAfter(finalAdicional)\r\n  ) {\r\n    difMinNotuno = finalAdicional.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  if (inicial.isSame(inicioAdicional)) {\r\n    if (final.isBefore(finalAdicional)) {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    } else {\r\n      difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  if (final.isSame(finalAdicional)) {\r\n    if (inicial.isBefore(inicioAdicional)) {\r\n      difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n    } else {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  return difMinNotuno;\r\n};\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport { ResumoModel } from \"@domain/models/calcular-resumo\";\r\nimport { CalcularResumoDia } from \"../../../../domain/usecases/calcular-resumo\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\nimport { arredondarParteDecimalHoras, arredondarParteDecimal } from \"./utils\";\r\n\r\nexport class CalcularResumoPostgresRepository implements CalcularResumoDia {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  private calcularResumo(funcionario: any) {\r\n    let somaMovimentacao60 = 0;\r\n    let somaMovimentacao100 = 0;\r\n    let somaMovimentacaoNoturna60 = 0;\r\n    let somaMovimentacaoNoturna100 = 0;\r\n    const saldoAnterior = { sessenta: 0, cem: 0 };\r\n    let horasDiurno60 = 0;\r\n    let horasDiurno100 = 0;\r\n    let horasNoturno60 = 0;\r\n    let horasNoturno100 = 0;\r\n\r\n    for (const cartao of funcionario.cartao) {\r\n      for (const cartao_dia of cartao.dias) {\r\n        const resumoDia = cartao_dia.ResumoDia || {\r\n          movimentacao60: 0,\r\n          movimentacao100: 0,\r\n          movimentacaoNoturna60: 0,\r\n          movimentacaoNoturna100: 0,\r\n        };\r\n\r\n        // Verifica se todas as movimentações são números antes de incluir no resumo\r\n        if (\r\n          typeof resumoDia.movimentacao60 === \"number\" &&\r\n          typeof resumoDia.movimentacao100 === \"number\" &&\r\n          typeof resumoDia.movimentacaoNoturna60 === \"number\" &&\r\n          typeof resumoDia.movimentacaoNoturna100 === \"number\"\r\n        ) {\r\n          if (!isNaN(resumoDia.movimentacao60)) somaMovimentacao60 += resumoDia.movimentacao60;\r\n          if (!isNaN(resumoDia.movimentacao100)) somaMovimentacao100 += resumoDia.movimentacao100;\r\n          if (!isNaN(resumoDia.movimentacaoNoturna60)) somaMovimentacaoNoturna60 += resumoDia.movimentacaoNoturna60;\r\n          if (!isNaN(resumoDia.movimentacaoNoturna100)) somaMovimentacaoNoturna100 += resumoDia.movimentacaoNoturna100;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Converter movimentacao60 e movimentacao100 em horas diurnas\r\n    horasDiurno60 = arredondarParteDecimalHoras(somaMovimentacao60 / 60);\r\n    horasDiurno100 = arredondarParteDecimalHoras(somaMovimentacao100 / 60);\r\n    horasNoturno60 = arredondarParteDecimalHoras(somaMovimentacaoNoturna60 / 60);\r\n    horasNoturno100 = arredondarParteDecimalHoras(somaMovimentacaoNoturna100 / 60);\r\n\r\n    return {\r\n      movimentacao: {\r\n        sessenta: somaMovimentacao60 + somaMovimentacaoNoturna60,\r\n        cem: somaMovimentacao100 + somaMovimentacaoNoturna100,\r\n      },\r\n      soma: {\r\n        sessenta: saldoAnterior.sessenta + somaMovimentacao60 + somaMovimentacaoNoturna60,\r\n        cem: saldoAnterior.cem + somaMovimentacao100 + somaMovimentacaoNoturna100,\r\n      },\r\n      horas: {\r\n        diurnas: { sessenta: horasDiurno60, cem: horasDiurno100 },\r\n        noturnas: { sessenta: horasNoturno60, cem: horasNoturno100 },\r\n      },\r\n      saldoAnterior: saldoAnterior,\r\n    };\r\n  }\r\n\r\n  public async calc(identificacao: string): Promise<ResumoModel> {\r\n    // Procurar o funcionário pelo identificador\r\n    const funcionario = await this.prisma.funcionario.findUnique({\r\n      where: { identificacao },\r\n      include: {\r\n        cartao: {\r\n          include: {\r\n            cartao_dia: {\r\n              orderBy: { id: \"asc\" },\r\n              include: {\r\n                eventos: true,\r\n              },\r\n            },\r\n          },\r\n          orderBy: { id: \"asc\" },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Verificar se o funcionário foi encontrado\r\n    if (!funcionario) {\r\n      throw new Error(\"Funcionário não encontrado\");\r\n    }\r\n\r\n    // Estrutura para os cartões e dias\r\n    const cartoes = funcionario.cartao.map((cartao) => {\r\n      const dias = cartao.cartao_dia.map((cartao_dia) => {\r\n        // Verificar se há eventos com tipoId 2 ou mais de um do tipo 8 e tratado false\r\n        const eventosCriticos = cartao_dia.eventos.filter((evento) => evento.tipoId === 2 && !evento.tratado);\r\n        const eventosTipo8 = cartao_dia.eventos.filter((evento) => evento.tipoId === 8 && !evento.tratado);\r\n\r\n        if (eventosCriticos.length > 0 || eventosTipo8.length > 1) {\r\n          // Se houver eventos críticos ou mais de um evento do tipo 8, não realiza o cálculo deste dia\r\n          return {\r\n            data: cartao_dia.data.toISOString(), // Convertendo Date para string\r\n            cartaoId: cartao_dia.cartaoId,\r\n            periodoDescanso: cartao_dia.periodoDescanso,\r\n            cargaHor: cartao_dia.cargaHor,\r\n            cargaHorariaCompleta: cartao_dia.cargaHorariaCompleta,\r\n            cargaHorariaNoturna: cartao_dia.cargaHorariaNoturna,\r\n            ResumoDia: {\r\n              movimentacao60: \"-\",\r\n              movimentacao100: \"-\",\r\n              movimentacaoNoturna60: \"-\",\r\n              movimentacaoNoturna100: \"-\",\r\n            },\r\n          };\r\n        }\r\n\r\n        const eventosNoturnos = cartao_dia.eventos.filter((evento) => evento.tipoId === 4);\r\n        const eventosDiurnos = cartao_dia.eventos.filter(\r\n          (evento) => evento.tipoId !== 2 && evento.tipoId !== 8 && evento.tipoId !== 4,\r\n        );\r\n\r\n        if (eventosDiurnos.length === 0) {\r\n          // Se não houver eventos diurnos, retornar os dados sem os cálculos\r\n          return {\r\n            data: cartao_dia.data.toISOString(), // Convertendo Date para string\r\n            cartaoId: cartao_dia.cartaoId,\r\n            periodoDescanso: cartao_dia.periodoDescanso,\r\n            cargaHor: cartao_dia.cargaHor,\r\n            cargaHorariaCompleta: cartao_dia.cargaHorariaCompleta,\r\n            cargaHorariaNoturna: cartao_dia.cargaHorariaNoturna,\r\n            ResumoDia: {\r\n              movimentacao60: 0,\r\n              movimentacao100: 0,\r\n              movimentacaoNoturna60: eventosNoturnos.reduce((sum, evento) => sum + evento.minutos, 0),\r\n              movimentacaoNoturna100: 0,\r\n            },\r\n          };\r\n        }\r\n\r\n        const totalMinutos = eventosDiurnos.reduce((sum, evento) => sum + evento.minutos, 0);\r\n        let movimentacao60 = totalMinutos - cartao_dia.cargaHor;\r\n        let movimentacao100 = 0;\r\n        let movimentacaoNoturna60 = eventosNoturnos.reduce((sum, evento) => sum + evento.minutos, 0);\r\n\r\n        if (movimentacao60 > 120) {\r\n          movimentacao100 = movimentacao60 - 120;\r\n          movimentacao60 = 120;\r\n        }\r\n\r\n        return {\r\n          data: cartao_dia.data.toISOString(), // Convertendo Date para string\r\n          cartaoId: cartao_dia.cartaoId,\r\n          periodoDescanso: cartao_dia.periodoDescanso,\r\n          cargaHor: cartao_dia.cargaHor,\r\n          cargaHorariaCompleta: cartao_dia.cargaHorariaCompleta,\r\n          cargaHorariaNoturna: cartao_dia.cargaHorariaNoturna,\r\n          ResumoDia: {\r\n            movimentacao60,\r\n            movimentacao100,\r\n            movimentacaoNoturna60,\r\n            movimentacaoNoturna100: 0, // Aqui pode adicionar a lógica correspondente\r\n          },\r\n        };\r\n      });\r\n\r\n      return {\r\n        referencia: cartao.referencia.toISOString(), // Convertendo Date para string\r\n        dias,\r\n      };\r\n    });\r\n\r\n    // Calcular o resumo\r\n    let resumoCalculado = this.calcularResumo({ cartao: cartoes });\r\n\r\n    // Aplicar a regra adicional\r\n    if (resumoCalculado.movimentacao.sessenta > 0) {\r\n      for (const cartao of cartoes) {\r\n        for (const cartao_dia of cartao.dias) {\r\n          const resumoDia = cartao_dia.ResumoDia;\r\n          if (typeof resumoDia.movimentacao60 === \"number\" && resumoDia.movimentacao60 < 0) {\r\n            const diferenca = Math.abs(resumoDia.movimentacao60);\r\n            if (resumoCalculado.movimentacao.sessenta >= diferenca) {\r\n              resumoDia.movimentacao60 /= 1.6;\r\n              resumoDia.movimentacao60 = arredondarParteDecimal(resumoDia.movimentacao60);\r\n              resumoCalculado.movimentacao.sessenta -= diferenca;\r\n            } else {\r\n              const restante = diferenca - resumoCalculado.movimentacao.sessenta;\r\n              resumoDia.movimentacao60 = 0;\r\n              resumoCalculado.movimentacao.sessenta = 0;\r\n              if (resumoCalculado.movimentacao.cem >= restante) {\r\n                resumoDia.movimentacao100 =\r\n                  typeof resumoDia.movimentacao100 === \"number\" ? resumoDia.movimentacao100 - restante : \"-\";\r\n                resumoCalculado.movimentacao.cem -= restante;\r\n              } else {\r\n                resumoDia.movimentacao100 =\r\n                  typeof resumoDia.movimentacao100 === \"number\" ? resumoDia.movimentacao100 - restante : \"-\";\r\n                resumoCalculado.movimentacao.cem = 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Recalcular o resumo após aplicar a regra adicional\r\n      resumoCalculado = this.calcularResumo({ cartao: cartoes });\r\n    }\r\n\r\n    // Retornar os dados completos\r\n    return {\r\n      identificacao: funcionario.identificacao,\r\n      cartao: cartoes,\r\n      Resumo: resumoCalculado,\r\n    };\r\n  }\r\n}\r\n","import { CalcularResumoPostgresRepository } from \"../../../infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, notFoundRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./calcular-resumo-protocols\";\r\n\r\nexport class CalcularResumoController implements Controller {\r\n  constructor(private readonly calcularResumoPostgresRepository: CalcularResumoPostgresRepository) {}\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { identificacao } = httpRequest?.query;\r\n\r\n      if (!identificacao) return badRequest(new FuncionarioParamError(\"identificacao não fornecido!\"));\r\n\r\n      const funcionario = await this.calcularResumoPostgresRepository.calc(identificacao);\r\n\r\n      // Verifica se nenhum funcionário foi encontrado\r\n      if (!funcionario) return notFoundRequest({ message: \"Funcionário não encontrado\", name: \"Error\" });\r\n\r\n      // Retorna o(s) funcionário(s) encontrado(s) juntamente com a mensagem e o resumo\r\n      return ok({ message: \"Identificador encontrado com sucesso\", data: funcionario });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { CalcularResumoPostgresRepository } from \"../../infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { CalcularResumoController } from \"../../presentation/controllers/calcular-resumo/carcular-resumo-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeCalcularresumoController = (): Controller => {\r\n  const calcularResumoPostgresRepository = new CalcularResumoPostgresRepository();\r\n  const calcularResumoController = new CalcularResumoController(calcularResumoPostgresRepository);\r\n  return new LogControllerDecorator(calcularResumoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeCalcularresumoController } from \"../../factories/calcular-resumo\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/calcular-resumo\", adaptRoute(makeCalcularresumoController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport moment from \"moment\";\r\nimport { prisma } from \"@infra/database/Prisma\";\r\nimport { AdicionarEventos } from \"../../../../data/usecase/add-eventos/add-eventos\";\r\nimport { criarEventoIntervaloEntrePeriodos } from \"./intervaloEntrePeriodos\";\r\nimport { criarEventoAdicionalNoturno } from \"./adicionalNoturno\";\r\n\r\nexport class CriarEventosPostgresRepository implements AdicionarEventos {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async add(input: { identificacao?: string }): Promise<boolean> {\r\n    const lancamentos = await this.prisma.cartao_dia_lancamento.findMany({\r\n      include: {\r\n        cartao_dia: {\r\n          include: {\r\n            cartao: {\r\n              include: {\r\n                funcionario: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      where: {\r\n        cartao_dia: { cartao: { funcionario: { identificacao: input?.identificacao } } },\r\n      },\r\n      orderBy: [{ cartao_dia: { cartao: { funcionarioId: \"asc\" } } }, { cartao_dia_id: \"asc\" }, { periodoId: \"asc\" }],\r\n    });\r\n\r\n    const eventosData = this.gerarEventos({ lancamentos });\r\n\r\n    const validEventosData = eventosData.filter((evento) => evento.cartaoDiaId && evento.hora);\r\n\r\n    const existingEvents = await this.prisma.eventos.findMany({\r\n      where: {\r\n        OR: validEventosData.map((evento) => ({\r\n          cartaoDiaId: evento.cartaoDiaId,\r\n          funcionarioId: evento.funcionarioId,\r\n          hora: evento.hora,\r\n        })),\r\n      },\r\n    });\r\n\r\n    const newEventosData = validEventosData.filter((evento) => {\r\n      return !existingEvents.some(\r\n        (existingEvent) =>\r\n          existingEvent.cartaoDiaId === evento.cartaoDiaId &&\r\n          existingEvent.funcionarioId === evento.funcionarioId &&\r\n          existingEvent.hora === evento.hora,\r\n      );\r\n    });\r\n\r\n    if (newEventosData.length === 0) {\r\n      console.log(\"Eventos já existem para as datas fornecidas.\");\r\n      return false;\r\n    }\r\n\r\n    await this.prisma.eventos.createMany({\r\n      data: newEventosData,\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  public gerarEventos(input: {\r\n    lancamentos: {\r\n      entrada: Date | null;\r\n      saida: Date | null;\r\n      periodoId: number;\r\n      cartao_dia: {\r\n        id: number;\r\n        data: Date;\r\n        cargaHorariaCompleta: string;\r\n        cartao: {\r\n          funcionario: {\r\n            id: number;\r\n          };\r\n        };\r\n      };\r\n    }[];\r\n  }) {\r\n    let eventos: any[] = [];\r\n    let eventosExcendentes: any[] = [];\r\n\r\n    // VERIFICAR SE EXISTE EXCEDENTE EM ALGUM PERIODO\r\n    let excedeu = false;\r\n    input.lancamentos.forEach((lancamento, index, lancamentosArray) => {\r\n      if (index === 0 || input.lancamentos[index - 1].cartao_dia.id !== lancamento.cartao_dia.id) {\r\n        excedeu = false;\r\n        eventosExcendentes = [];\r\n      }\r\n\r\n      if (!lancamento.entrada || !lancamento.saida) return;\r\n\r\n      const entrada = this.pegarLancamento({ data: lancamento.entrada });\r\n      const saida = this.pegarLancamento({ data: lancamento.saida });\r\n\r\n      console.log(`Entrada: ${entrada.format(\"HH:mm\")} - Saída: ${saida.format(\"HH:mm\")}`);\r\n\r\n      const cargaHorariaCompletaArray = this.pegarCargaHorarioCompleta(lancamento.cartao_dia.cargaHorariaCompleta);\r\n      const horarioEntradaEsperado1 = this.pegarHorarioCargaHoraria({\r\n        data: lancamento.cartao_dia.data,\r\n        hora: cargaHorariaCompletaArray[0].hora,\r\n        minuto: cargaHorariaCompletaArray[0].minuto,\r\n        utc: false,\r\n      });\r\n      const horarioSaidaEsperado = this.pegarHorarioCargaHoraria({\r\n        data: lancamento.cartao_dia.data,\r\n        hora: cargaHorariaCompletaArray[cargaHorariaCompletaArray.length - 2].hora,\r\n        minuto: cargaHorariaCompletaArray[cargaHorariaCompletaArray.length - 2].minuto,\r\n        utc: false,\r\n      });\r\n\r\n      console.log(`Horário Entrada Esperado: ${horarioEntradaEsperado1.format(\"HH:mm\")}`);\r\n      console.log(`Horário Saída Esperado: ${horarioSaidaEsperado.format(\"HH:mm\")}`);\r\n      console.log(`Saída Real: ${saida.format(\"HH:mm\")}`);\r\n\r\n      const resultado = this.extrairEventosPeriodo(\r\n        lancamento,\r\n        entrada,\r\n        saida,\r\n        horarioEntradaEsperado1,\r\n        horarioSaidaEsperado,\r\n        eventos,\r\n        eventosExcendentes,\r\n        index === lancamentosArray.length - 1,\r\n      );\r\n\r\n      if (resultado) excedeu = true;\r\n\r\n      if (index < lancamentosArray.length - 1) {\r\n        const proximoLancamento = lancamentosArray[index + 1];\r\n        if (proximoLancamento.periodoId === lancamento.periodoId + 1) {\r\n          const horarioSaidaPeriodoAtual = saida;\r\n          const horarioEntradaProximoPeriodo = moment.utc(proximoLancamento.entrada);\r\n          this.extrairIntervalosEntrePeriodos(horarioSaidaPeriodoAtual, horarioEntradaProximoPeriodo, lancamento, eventos);\r\n        }\r\n      }\r\n\r\n      if (excedeu) {\r\n        eventosExcendentes.forEach((value) => {\r\n          const novoEventos: any[] = [];\r\n\r\n          eventos.map((evento) => {\r\n            if (evento.cartaoDiaId === value.cartaoDiaId && evento.hora === value.hora && evento.tipoId === 9) {\r\n              console.log(\"entuo\");\r\n            } else {\r\n              novoEventos.push(evento);\r\n            }\r\n\r\n            return undefined;\r\n          });\r\n\r\n          novoEventos.push(value);\r\n\r\n          eventos = novoEventos;\r\n\r\n          //eventos.push(value);\r\n        });\r\n\r\n        eventosExcendentes = [];\r\n      }\r\n    });\r\n\r\n    return eventos;\r\n  }\r\n\r\n  private extrairEventosPeriodo(\r\n    lancamento: any,\r\n    entrada: moment.Moment,\r\n    saida: moment.Moment,\r\n    horarioEntradaEsperado1: moment.Moment,\r\n    horarioSaidaEsperado: moment.Moment,\r\n    eventos: any[],\r\n    eventosExcendentes: any[],\r\n    isUltimoPeriodo: boolean,\r\n  ) {\r\n    let excedeu = false;\r\n    const periodoId = lancamento.periodoId;\r\n    if (horarioSaidaEsperado.isBefore(horarioEntradaEsperado1)) {\r\n      horarioSaidaEsperado.add(1, \"day\");\r\n    }\r\n\r\n    if (periodoId === 1) {\r\n      const resultado1 = this.criarEventoPeriodo1(\r\n        lancamento,\r\n        entrada,\r\n        saida,\r\n        horarioEntradaEsperado1,\r\n        eventos,\r\n        eventosExcendentes,\r\n      );\r\n\r\n      if (resultado1) excedeu = true;\r\n    } else if (periodoId === 2) {\r\n      const resultado2 = this.criarEventoPeriodo2(lancamento, entrada, saida, horarioSaidaEsperado, eventos, eventosExcendentes);\r\n      if (resultado2) excedeu = true;\r\n    }\r\n\r\n    if (isUltimoPeriodo) {\r\n      const eventoAdicionalNoturno = criarEventoAdicionalNoturno(horarioSaidaEsperado, saida, lancamento);\r\n      if (eventoAdicionalNoturno) {\r\n        eventos.push(eventoAdicionalNoturno);\r\n        console.log(\r\n          `Evento Adicional Noturno criado: ${eventoAdicionalNoturno.hora} - Tipo: ${eventoAdicionalNoturno.tipoId} - Minutos: ${eventoAdicionalNoturno.minutos}`,\r\n        );\r\n      }\r\n    }\r\n\r\n    return excedeu;\r\n  }\r\n\r\n  private criarEventoPeriodo1(\r\n    lancamento: any,\r\n    entrada: moment.Moment,\r\n    saida: moment.Moment,\r\n    horarioEntradaEsperado1: moment.Moment,\r\n    eventos: any[],\r\n    eventosExcendentes: any[],\r\n  ) {\r\n    let excedeu = false;\r\n\r\n    if (entrada.isBefore(horarioEntradaEsperado1)) {\r\n      console.log(\"Entrou\");\r\n      const eventoPeriodoReal = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${horarioEntradaEsperado1.format(\"HH:mm\")} - ${saida.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: saida.diff(horarioEntradaEsperado1, \"minutes\"),\r\n      };\r\n      eventos.push(eventoPeriodoReal);\r\n      console.log(\r\n        `Evento criado: ${eventoPeriodoReal.hora} - Tipo: ${eventoPeriodoReal.tipoId} - Minutos: ${eventoPeriodoReal.minutos}`,\r\n      );\r\n\r\n      const eventoExcedentePositivoReal = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${entrada.format(\"HH:mm\")} - ${horarioEntradaEsperado1.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: horarioEntradaEsperado1.diff(entrada, \"minutes\"),\r\n      };\r\n\r\n      eventos.push(eventoExcedentePositivoReal);\r\n      console.log(\r\n        `Evento criado: ${eventoPeriodoReal.hora} - Tipo: ${eventoPeriodoReal.tipoId} - Minutos: ${eventoPeriodoReal.minutos}`,\r\n      );\r\n    } else {\r\n      const eventoPeriodo1 = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${entrada.format(\"HH:mm\")} - ${saida.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: saida.diff(entrada, \"minutes\"),\r\n      };\r\n\r\n      eventos.push(eventoPeriodo1);\r\n      console.log(`Evento criado: ${eventoPeriodo1.hora} - Tipo: ${eventoPeriodo1.tipoId} - Minutos: ${eventoPeriodo1.minutos}`);\r\n    }\r\n\r\n    const eventoExcedentePositivo = {\r\n      cartaoDiaId: lancamento.cartao_dia.id,\r\n      hora: `${entrada.format(\"HH:mm\")} - ${horarioEntradaEsperado1.format(\"HH:mm\")}`,\r\n      tipoId: 1,\r\n      funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n      minutos: horarioEntradaEsperado1.diff(entrada, \"minutes\"),\r\n    };\r\n\r\n    if (eventoExcedentePositivo.minutos < 0) {\r\n      eventoExcedentePositivo.tipoId = 2;\r\n    }\r\n\r\n    if (eventoExcedentePositivo.minutos < 0) {\r\n      eventoExcedentePositivo.hora = `${horarioEntradaEsperado1.format(\"HH:mm\")} - ${entrada.format(\"HH:mm\")}`;\r\n    }\r\n\r\n    if (Math.abs(eventoExcedentePositivo.minutos) > 5) {\r\n      excedeu = true;\r\n    }\r\n\r\n    if (Math.abs(eventoExcedentePositivo.minutos) > 0) {\r\n      eventosExcendentes.push(eventoExcedentePositivo);\r\n    }\r\n\r\n    if (excedeu) {\r\n      console.log(\r\n        `Evento criado: ${eventoExcedentePositivo.hora} - Tipo: ${eventoExcedentePositivo.tipoId} - Minutos: ${eventoExcedentePositivo.minutos}`,\r\n      );\r\n    } else {\r\n      const eventoPositivo = {\r\n        ...eventoExcedentePositivo,\r\n        tipoId: 9,\r\n        minutos: Math.abs(eventoExcedentePositivo.minutos),\r\n      };\r\n      eventos.push(eventoPositivo);\r\n      console.log(\r\n        `Evento positivo criado: ${eventoPositivo.hora} - Tipo: ${eventoPositivo.tipoId} - Minutos: ${eventoPositivo.minutos}`,\r\n      );\r\n    }\r\n    return excedeu;\r\n  }\r\n\r\n  private criarEventoPeriodo2(\r\n    lancamento: any,\r\n    entrada: moment.Moment,\r\n    saida: moment.Moment,\r\n    horarioSaidaEsperado: moment.Moment,\r\n    eventos: any[],\r\n    eventosExcendentes: any[],\r\n  ) {\r\n    let excedeu = false;\r\n\r\n    if (saida.isBefore(horarioSaidaEsperado)) {\r\n      const eventoPeriodoReal = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${entrada.format(\"HH:mm\")} - ${saida.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: saida.diff(entrada, \"minutes\"),\r\n      };\r\n      eventos.push(eventoPeriodoReal);\r\n      console.log(\r\n        `Evento criado: ${eventoPeriodoReal.hora} - Tipo: ${eventoPeriodoReal.tipoId} - Minutos: ${eventoPeriodoReal.minutos}`,\r\n      );\r\n\r\n      const eventoExcedentePositivo = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${horarioSaidaEsperado.format(\"HH:mm\")} - ${saida.format(\"HH:mm\")}`,\r\n        tipoId: 2,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: saida.diff(horarioSaidaEsperado, \"minutes\"),\r\n      };\r\n\r\n      console.log(eventoExcedentePositivo.minutos, \"minutos\");\r\n\r\n      if (Math.abs(eventoExcedentePositivo.minutos) > 5) {\r\n        excedeu = true;\r\n      }\r\n\r\n      if (Math.abs(eventoExcedentePositivo.minutos) > 0) {\r\n        eventosExcendentes.push(eventoExcedentePositivo);\r\n      }\r\n\r\n      if (eventoExcedentePositivo.minutos < 0) {\r\n        eventoExcedentePositivo.hora = `${saida.format(\"HH:mm\")} - ${horarioSaidaEsperado.format(\"HH:mm\")}`;\r\n      }\r\n\r\n      if (excedeu) {\r\n        console.log(\r\n          `Evento criado000000000: ${eventoExcedentePositivo.hora} - Tipo: ${eventoExcedentePositivo.tipoId} - Minutos: ${eventoExcedentePositivo.minutos}`,\r\n        );\r\n      } else {\r\n        const eventoPositivo = {\r\n          ...eventoExcedentePositivo,\r\n          tipoId: 9,\r\n          minutos: Math.abs(eventoExcedentePositivo.minutos),\r\n        };\r\n        eventos.push(eventoPositivo);\r\n      }\r\n    } else {\r\n      const eventoPeriodoEsperado = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${entrada.format(\"HH:mm\")} - ${horarioSaidaEsperado.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: horarioSaidaEsperado.diff(entrada, \"minutes\"),\r\n      };\r\n      eventos.push(eventoPeriodoEsperado);\r\n      console.log(\r\n        `Evento criado: ${eventoPeriodoEsperado.hora} - Tipo: ${eventoPeriodoEsperado.tipoId} - Minutos: ${eventoPeriodoEsperado.minutos}`,\r\n      );\r\n\r\n      const eventoExcedentePositivo = {\r\n        cartaoDiaId: lancamento.cartao_dia.id,\r\n        hora: `${horarioSaidaEsperado.format(\"HH:mm\")} - ${saida.format(\"HH:mm\")}`,\r\n        tipoId: 1,\r\n        funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n        minutos: saida.diff(horarioSaidaEsperado, \"minutes\"),\r\n      };\r\n\r\n      if (Math.abs(eventoExcedentePositivo.minutos) > 5) {\r\n        excedeu = true;\r\n      }\r\n\r\n      if (Math.abs(eventoExcedentePositivo.minutos) > 0) {\r\n        eventosExcendentes.push(eventoExcedentePositivo);\r\n      }\r\n\r\n      if (excedeu) {\r\n        console.log(\r\n          `Evento criado: ${eventoExcedentePositivo.hora} - Tipo: ${eventoExcedentePositivo.tipoId} - Minutos: ${eventoExcedentePositivo.minutos}`,\r\n        );\r\n      } else {\r\n        const eventoPositivo = {\r\n          ...eventoExcedentePositivo,\r\n          tipoId: 9,\r\n          minutos: Math.abs(eventoExcedentePositivo.minutos),\r\n        };\r\n        eventos.push(eventoPositivo);\r\n      }\r\n    }\r\n\r\n    return excedeu;\r\n  }\r\n\r\n  public extrairIntervalosEntrePeriodos(\r\n    horarioSaidaPeriodoAtual: moment.Moment,\r\n    horarioEntradaProximoPeriodo: moment.Moment,\r\n    lancamento: any,\r\n    eventos: any[],\r\n  ) {\r\n    const eventoIntervalo = criarEventoIntervaloEntrePeriodos(\r\n      horarioSaidaPeriodoAtual,\r\n      horarioEntradaProximoPeriodo,\r\n      lancamento,\r\n      eventos.length,\r\n    );\r\n    if (eventoIntervalo) {\r\n      eventos.push(eventoIntervalo);\r\n      console.log(`Evento Intervalo: ${eventoIntervalo.hora} - Minutos: ${eventoIntervalo.minutos}`);\r\n    }\r\n  }\r\n\r\n  public pegarLancamento(input: { data: Date }) {\r\n    return moment.utc(input.data);\r\n  }\r\n\r\n  public pegarCargaHorarioCompleta(input: string) {\r\n    const horaMinutos = input.replaceAll(\".\", \":\").split(\";\");\r\n    return horaMinutos.map((a) => {\r\n      const [hora, minuto] = a.split(\":\");\r\n      return { hora: Number(hora), minuto: Number(minuto) };\r\n    });\r\n  }\r\n\r\n  public pegarHorarioCargaHoraria(input: { data: Date; hora: number; minuto: number; utc?: boolean }) {\r\n    return moment.utc(input.data).set({\r\n      hours: input.hora,\r\n      minutes: input.minuto,\r\n      date: moment(input.data).utc(input.utc).date(),\r\n      months: moment(input.data).utc(input.utc).month(),\r\n      years: moment(input.data).utc(input.utc).year(),\r\n      second: 0,\r\n    });\r\n  }\r\n\r\n  public formatarDataCartao(input: { data: Date }) {\r\n    return moment.utc(input.data).format(\"YYYY-MM-DD\");\r\n  }\r\n}\r\n","import moment from \"moment\";\r\n\r\nexport function calcularTotalMinutos(entrada: string, saida: string, extra?: string): number {\r\n  const [entradaHoras, entradaMinutos] = entrada.split(\":\").map(Number);\r\n  const [saidaHoras, saidaMinutos] = saida.split(\":\").map(Number);\r\n\r\n  let totalMinutosEntrada = entradaHoras * 60 + entradaMinutos;\r\n  let totalMinutosSaida = saidaHoras * 60 + saidaMinutos;\r\n\r\n  if (extra && extra !== \"\") {\r\n    const [extraHoras, extraMinutos] = extra.split(\":\").map(Number);\r\n    totalMinutosSaida += extraHoras * 60 + extraMinutos;\r\n  }\r\n  return totalMinutosSaida - totalMinutosEntrada;\r\n}\r\n\r\nexport function arredondarParteDecimalHoras(numero: number): number {\r\n  const inteiro = Math.floor(numero); // Obtém a parte inteira do número\r\n  const decimal = numero - inteiro; // Obtém a parte decimal do número\r\n  const terceiraCasa = Math.floor((decimal * 1000) % 10); // Obtém a terceira casa decimal\r\n\r\n  // Verifica se a terceira casa decimal é maior ou igual a 6\r\n  if (terceiraCasa >= 6) {\r\n    // Arredonda para cima a segunda casa decimal\r\n    return Math.round(numero * 100) / 100;\r\n  } else {\r\n    // Trunca para duas casas decimais\r\n    return Math.floor(numero * 100) / 100;\r\n  }\r\n}\r\n\r\nexport function arredondarParteDecimal(numero: number): number {\r\n  const inteiro = Math.floor(numero); // Obtém a parte inteira do número\r\n  const decimal = numero - inteiro; // Obtém a parte decimal do número\r\n\r\n  // Se a parte decimal for maior ou igual a 0.6, arredonde para cima\r\n  if (decimal >= 0.6) {\r\n    return inteiro + 1; // Adiciona 1 para arredondar para cima\r\n  } else {\r\n    return inteiro; // Mantém o inteiro, arredondando para baixo\r\n  }\r\n}\r\n\r\nexport const BuscarHorarioNortunoEmMinutos = (data: moment.Moment, inicial: moment.Moment, final: moment.Moment): number => {\r\n  let difMinNotuno = 0;\r\n  const inicioAdicional = moment(data).utc(false).minutes(0).seconds(0).hour(22);\r\n  const finalAdicional = moment(data).utc(false).minutes(0).seconds(0).add(1, \"d\").hour(5);\r\n\r\n  //Quando Entrada e saida estão no adicional\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional)) {\r\n    if (inicial.isAfter(inicioAdicional)) {\r\n      if (final.isBefore(finalAdicional)) {\r\n        difMinNotuno = final.diff(inicial, \"minutes\");\r\n      }\r\n    }\r\n  }\r\n\r\n  //Quando a saida está entre o adicional e a entrada está antes\r\n  if (final.isBetween(inicioAdicional, finalAdicional) && inicial?.isBefore(inicioAdicional)) {\r\n    difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  //Quando a entrada está entre o adicional e a saida depois\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional) && final?.isAfter(finalAdicional)) {\r\n    difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n  }\r\n\r\n  //Quando inicio e final do adicional estão entre entrada e saida e entrada é antes do inicio do adicional e a saída é depois do fim do adicional\r\n  if (\r\n    inicioAdicional.isBetween(inicial, final) &&\r\n    finalAdicional.isBetween(inicial, final) &&\r\n    inicial.isBefore(inicioAdicional) &&\r\n    final.isAfter(finalAdicional)\r\n  ) {\r\n    difMinNotuno = finalAdicional.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  if (inicial.isSame(inicioAdicional)) {\r\n    if (final.isBefore(finalAdicional)) {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    } else {\r\n      difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  if (final.isSame(finalAdicional)) {\r\n    if (inicial.isBefore(inicioAdicional)) {\r\n      difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n    } else {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  return difMinNotuno;\r\n};\r\n","import moment from \"moment\";\r\n\r\nimport { arredondarParteDecimal } from \"./utils\";\r\n\r\nexport function calcularIntervaloEntrePeriodos(\r\n  horarioSaidaPrimeiroPeriodo: moment.Moment,\r\n  horarioEntradaSegundoPeriodo: moment.Moment,\r\n): number {\r\n  const diferenca = horarioEntradaSegundoPeriodo.diff(horarioSaidaPrimeiroPeriodo, \"minutes\");\r\n  return diferenca;\r\n}\r\n\r\nexport function criarEventoIntervaloEntrePeriodos(\r\n  horarioSaidaPrimeiroPeriodo: moment.Moment,\r\n  horarioEntradaSegundoPeriodo: moment.Moment,\r\n  lancamento: any,\r\n  totalPeriodos: number,\r\n): any {\r\n\r\n  const minutosIntervalo = calcularIntervaloEntrePeriodos(horarioSaidaPrimeiroPeriodo, horarioEntradaSegundoPeriodo);\r\n  if (minutosIntervalo !== 0) {\r\n    const hora =\r\n      minutosIntervalo > 0\r\n        ? `${horarioSaidaPrimeiroPeriodo.format(\"HH:mm\")} - ${horarioEntradaSegundoPeriodo.format(\"HH:mm\")}`\r\n        : `${horarioEntradaSegundoPeriodo.format(\"HH:mm\")} - ${horarioSaidaPrimeiroPeriodo.format(\"HH:mm\")}`;\r\n\r\n    return {\r\n      cartaoDiaId: lancamento.cartao_dia.id,\r\n      hora,\r\n      tipoId: 8, // Defina um tipoId apropriado para o intervalo entre períodos\r\n      funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n      minutos: arredondarParteDecimal(minutosIntervalo),\r\n    };\r\n  }\r\n  return null;\r\n}\r\n","import moment from \"moment\";\r\nimport { arredondarParteDecimal } from \"./utils\";\r\n\r\nexport function calcularAdicionalNoturno(horarioEsperado: moment.Moment, horarioReal: moment.Moment, lancamento: any): number {\r\n  const inicioAdicionalNoturno = moment.utc(lancamento.cartao_dia.data).set({ hour: 22, minute: 0, second: 0 });\r\n  const fimAdicionalNoturno = moment.utc(lancamento.cartao_dia.data).set({ hour: 5, minute: 0, second: 0 }).add(1, \"day\");\r\n\r\n  let minutosAdicionalNoturno = 0;\r\n\r\n  const esperadoEstaNorutno = horarioEsperado.isBetween(inicioAdicionalNoturno, fimAdicionalNoturno);\r\n  const realEstaNorutno = horarioReal.isBetween(inicioAdicionalNoturno, fimAdicionalNoturno);\r\n\r\n  if (!esperadoEstaNorutno && !realEstaNorutno) {\r\n    return 0;\r\n  }\r\n\r\n  // Verificar se o horário real excede o horário esperado\r\n  if (horarioReal.isAfter(horarioEsperado)) {\r\n    const minutosExcedidos = horarioReal.diff(horarioEsperado, \"minutes\");\r\n\r\n    // Verificar se o horário excedente está dentro do período de adicional noturno\r\n    if (horarioEsperado.isBefore(inicioAdicionalNoturno) && horarioReal.isAfter(inicioAdicionalNoturno)) {\r\n      minutosAdicionalNoturno = Math.min(horarioReal.diff(inicioAdicionalNoturno, \"minutes\"), minutosExcedidos);\r\n    } else if (horarioEsperado.isAfter(inicioAdicionalNoturno) || horarioEsperado.isBefore(fimAdicionalNoturno)) {\r\n      minutosAdicionalNoturno = Math.min(minutosExcedidos, fimAdicionalNoturno.diff(horarioEsperado, \"minutes\"));\r\n    }\r\n  } else {\r\n    const minutosFaltantes = horarioEsperado.diff(horarioReal, \"minutes\");\r\n\r\n    if (horarioReal.isBefore(fimAdicionalNoturno) && horarioReal.isAfter(inicioAdicionalNoturno)) {\r\n      minutosAdicionalNoturno = -Math.min(fimAdicionalNoturno.diff(horarioReal, \"minutes\"), minutosFaltantes);\r\n    } else if (horarioEsperado.isAfter(inicioAdicionalNoturno) || horarioEsperado.isBefore(fimAdicionalNoturno)) {\r\n      minutosAdicionalNoturno = -Math.min(minutosFaltantes, fimAdicionalNoturno.diff(horarioReal, \"minutes\"));\r\n    }\r\n  }\r\n\r\n  const adicionalNoturno = minutosAdicionalNoturno * 0.14;\r\n  return arredondarParteDecimal(adicionalNoturno);\r\n}\r\n\r\nexport function criarEventoAdicionalNoturno(horarioEsperado: moment.Moment, horarioReal: moment.Moment, lancamento: any): any {\r\n  const minutosAdicionalNoturno = calcularAdicionalNoturno(horarioEsperado, horarioReal, lancamento);\r\n  if (minutosAdicionalNoturno !== 0) {\r\n    const hora =\r\n      minutosAdicionalNoturno > 0\r\n        ? `${horarioEsperado.format(\"HH:mm\")} - ${horarioReal.format(\"HH:mm\")}`\r\n        : `${horarioReal.format(\"HH:mm\")} - ${horarioEsperado.format(\"HH:mm\")}`;\r\n\r\n    return {\r\n      cartaoDiaId: lancamento.cartao_dia.id,\r\n      hora,\r\n      tipoId: 4,\r\n      funcionarioId: lancamento.cartao_dia.cartao.funcionario.id,\r\n      minutos: minutosAdicionalNoturno,\r\n    };\r\n  }\r\n  return null;\r\n}\r\n","import { CriarEventosPostgresRepository } from \"../../../infra/db/postgresdb/eventos/eventos-repository\";\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./eventos-protocols\";\r\n\r\nexport class CriarEventosController implements Controller {\r\n  constructor(private readonly criarEventosPostgresRepository: CriarEventosPostgresRepository) {}\r\n\r\n  async handle(req: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      console.log(\"req.query.identificacao\", req.query.identificacao);\r\n      const eventosCriados = await this.criarEventosPostgresRepository.add({ identificao: req.query.identificacao });\r\n\r\n      if (!eventosCriados) throw \"Erro ao criar eventos!\";\r\n\r\n      return ok({ message: \"Eventos criados com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { CriarEventosPostgresRepository } from \"@infra/db/postgresdb/eventos/eventos-repository\";\r\n\r\nimport { CriarEventosController } from \"../../presentation/controllers/eventos/eventos-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeCriarEventosController = (): Controller => {\r\n  const criarEventosPostgresRepository = new CriarEventosPostgresRepository();\r\n  const criarEventosController = new CriarEventosController(criarEventosPostgresRepository);\r\n  return new LogControllerDecorator(criarEventosController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeCriarEventosController } from \"../../factories/criar-eventos\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/eventos\", adaptRoute(makeCriarEventosController()));\r\n};\r\n\r\nexport default route;\r\n","import { DelDeleteCartoa,DeleteCartoa } from \"../../../domain/usecases/delete-cartao\";\r\nimport { DelDeleteCartoaRepository } from \"./add-delete-cartoa-repository\";\r\n\r\nexport class DbAddDeleteCartao implements DeleteCartoa {\r\n  private readonly delDeleteCartoaRepository: DelDeleteCartoaRepository;\r\n\r\n  constructor(delDeleteCartoaRepository: DelDeleteCartoaRepository) {\r\n    this.delDeleteCartoaRepository = delDeleteCartoaRepository;\r\n  }\r\n\r\n  async deleteByReferencia(deleteReferencia: DelDeleteCartoa): Promise<void> {\r\n    await this.delDeleteCartoaRepository.deleteByReferencia(deleteReferencia);\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { DelDeleteCartoaRepository } from \"../../../../data/usecase/delete-cartao/add-delete-cartoa-repository\";\r\nimport { DelDeleteCartoa } from \"../../../../domain/usecases/delete-cartao\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class DeleteCartaoPostgresRepository implements DelDeleteCartoaRepository {\r\n  private readonly prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  async deleteByReferencia(deleteReferencia: DelDeleteCartoa): Promise<void> {\r\n    try {\r\n      const { referencia } = deleteReferencia;\r\n\r\n      // Convertendo a string de referência para Date\r\n      const referenceDate = new Date(referencia);\r\n      const nextDay = new Date(referenceDate);\r\n      nextDay.setDate(referenceDate.getDate() + 1);\r\n\r\n      await this.prisma.cartao.deleteMany({\r\n        where: {\r\n          referencia: {\r\n            gte: referenceDate,\r\n            lt: nextDay,\r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao deletar o cartão do mês\", error);\r\n      throw new Error(\"Erro ao deletar o cartão do mês\");\r\n    }\r\n  }\r\n}\r\n","import { DbAddDeleteCartao } from \"../../../data/usecase/delete-cartao/db-add-dele-cartoa\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./delete-cartao-protocools\";\r\n\r\nexport class DeleteCartaoController implements Controller {\r\n  private readonly dbAddDeleteCartao: DbAddDeleteCartao;\r\n\r\n  constructor(dbAddDeleteCartao: DbAddDeleteCartao) {\r\n    this.dbAddDeleteCartao = dbAddDeleteCartao;\r\n  }\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { referencia } = httpRequest.body;\r\n\r\n      if (!referencia) {\r\n        return badRequest(new FuncionarioParamError(\"Referência do mês não encontrada\"));\r\n      }\r\n\r\n      // Validando a data no formato YYYY-MM-DD\r\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(referencia)) {\r\n        return badRequest(new FuncionarioParamError(\"Formato de referência inválido. Use YYYY-MM-DD.\"));\r\n      }\r\n\r\n      await this.dbAddDeleteCartao.deleteByReferencia({ referencia });\r\n\r\n      return ok({ message: \"Cartão do mês deletado com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { DbAddDeleteCartao } from \"../../data/usecase/delete-cartao/db-add-dele-cartoa\";\r\nimport { DeleteCartaoPostgresRepository } from \"../../infra/db/postgresdb/delete-cartao-repository/delete-cartao-repository\";\r\nimport { DeleteCartaoController } from \"../../presentation/controllers/delete-cartao/delete-cartao-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeDeleteCartaoController = (): Controller => {\r\n  const deleteCartaoPostgresRepository = new DeleteCartaoPostgresRepository();\r\n  const dbAddDeleteCartao = new DbAddDeleteCartao(deleteCartaoPostgresRepository);\r\n  const deleteCartaoController = new DeleteCartaoController(dbAddDeleteCartao);\r\n  return new LogControllerDecorator(deleteCartaoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeDeleteCartaoController } from \"../../factories/delete-cartao\";\r\n\r\n// Rota para deletar dados\r\nconst route = (router: Router): void => {\r\n  router.delete(\"/deletar-cartao\", adaptRoute(makeDeleteCartaoController()));\r\n};\r\n\r\nexport default route;\r\n","import { DelDelete, DelDeleteModel } from \"../../../domain/usecases/delete-dia-horarios\";\r\nimport { DelDeleteRepository } from \"./add-delete-repository\";\r\n\r\nexport class DbAddDelete implements DelDelete {\r\n  private readonly deldeleteRepository: DelDeleteRepository;\r\n\r\n  constructor(deldeleteRepository: DelDeleteRepository) {\r\n    this.deldeleteRepository = deldeleteRepository;\r\n  }\r\n\r\n  async deleteById(deleteData: DelDeleteModel): Promise<void> {\r\n    await this.deldeleteRepository.deleteById(deleteData);\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { DelDeleteRepository } from \"../../../../data/usecase/delete-dia-horarios/add-delete-repository\";\r\nimport { DelDeleteModel } from \"../../../../domain/usecases/delete-dia-horarios\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class DeletePostgresRepository implements DelDeleteRepository {\r\n  private readonly prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  async deleteById(deleteData: DelDeleteModel): Promise<void> {\r\n    try {\r\n      const { cartao_dia_id } = deleteData;\r\n\r\n      // Deletar registros correspondentes na tabela cartao_dia_lancamento\r\n      await this.prisma.cartao_dia_lancamento.deleteMany({\r\n        where: {\r\n          cartao_dia_id,\r\n        },\r\n      });\r\n\r\n      // Deletar eventos correspondentes na tabela eventos\r\n      await this.prisma.eventos.deleteMany({\r\n        where: {\r\n          cartaoDiaId: cartao_dia_id,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao deletar horário:\", error);\r\n      throw new Error(\"Erro ao deletar horário\");\r\n    }\r\n  }\r\n}\r\n","import { DbAddDelete } from \"../../../data/usecase/delete-dia-horarios/db-add-delete\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./delete-protocols\";\r\n\r\nexport class DeleteController implements Controller {\r\n  private readonly dbAddDelete: DbAddDelete;\r\n\r\n  constructor(dbAddDelete: DbAddDelete) {\r\n    this.dbAddDelete = dbAddDelete;\r\n  }\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { cartao_dia_id } = httpRequest.body; // Extrair o ID da requisição HTTP\r\n\r\n      if (!cartao_dia_id) {\r\n        return badRequest(new FuncionarioParamError(\"ID do dia não fornecido\"));\r\n      }\r\n\r\n      await this.dbAddDelete.deleteById({ cartao_dia_id }); // Passar o ID extraído para deletar\r\n\r\n      return ok({ message: \"Registro deletado com sucesso\" });\r\n    } catch (error) {\r\n      console.log(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { DbAddDelete } from \"../../data/usecase/delete-dia-horarios/db-add-delete\";\r\nimport { DeletePostgresRepository } from \"../../infra/db/postgresdb/delete-dia-horario-repository/delete-dia-horario-repository\";\r\nimport { DeleteController } from \"../../presentation/controllers/deletar/delete-dia-horarios-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeDeleteController = (): Controller => {\r\n  const deletePostgresRepository = new DeletePostgresRepository();\r\n  const dbAddDelete = new DbAddDelete(deletePostgresRepository);\r\n  const deleteController = new DeleteController(dbAddDelete);\r\n  return new LogControllerDecorator(deleteController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeDeleteController } from \"../../factories/delete-dia-horario-factore\";\r\n\r\n// Rota para deletar dados\r\nconst route = (router: Router): void => {\r\n  router.delete(\"/deletar\", adaptRoute(makeDeleteController()));\r\n};\r\n\r\nexport default route;\r\n","import fs from \"fs\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const exportarDadosDemitidosParaArquivo = async (\r\n  callback: (err: Error | null, filename?: string) => void,\r\n  identificacao?: string,\r\n  localidade?: string,\r\n) => {\r\n  try {\r\n    // Definir filtros de busca\r\n    const where: any = {};\r\n    if (identificacao) {\r\n      where.identificacao = identificacao;\r\n    }\r\n    if (localidade) {\r\n      where.localidade = {\r\n        nome: localidade,\r\n      };\r\n    }\r\n\r\n    console.log(\"bateu\");\r\n    // Buscar os dados das tabelas com filtros\r\n    const funcionarios = await prisma.funcionario.findMany({\r\n      where,\r\n      include: {\r\n        cartao: {\r\n          include: {\r\n            cartao_dia: {\r\n              include: {\r\n                cartao_dia_lancamentos: {\r\n                  orderBy: {\r\n                    entrada: \"asc\", // Ordena os lançamentos por entrada em ordem crescente\r\n                  },\r\n                },\r\n              },\r\n              orderBy: {\r\n                data: \"asc\", // Ordena os dias de cartão por data em ordem crescente\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Preparar os dados para o arquivo\r\n    const linhas = funcionarios.flatMap((funcionario) => {\r\n      return funcionario.cartao.flatMap((cartao) => {\r\n        return cartao.cartao_dia.map((dia) => {\r\n          const lancamentos = dia.cartao_dia_lancamentos;\r\n          // Verificar se há lançamentos para este dia\r\n          if (lancamentos && lancamentos.length > 0) {\r\n            const entradasSaidas = lancamentos\r\n              .map((lancamento) => {\r\n                // Ajustar para o fuso horário local antes de formatar o tempo\r\n                const entradaLocal = ajustarFusoHorario(lancamento.entrada, 3); // Ajuste de 3 horas\r\n                const saidaLocal = ajustarFusoHorario(lancamento.saida, 3); // Ajuste de 3 horas\r\n                const entrada = formatarTempo(entradaLocal);\r\n                const saida = formatarTempo(saidaLocal);\r\n                return `${entrada};${saida}`;\r\n              })\r\n              .join(\";\");\r\n\r\n            return `${funcionario.identificacao};${formatarData(dia.data)};${entradasSaidas}`;\r\n          } else {\r\n            // Se não houver lançamentos, retornar uma string vazia\r\n            return \"\";\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // Filtrar as linhas para remover as linhas vazias\r\n    const linhasFiltradas = linhas.filter((linha) => linha !== \"\");\r\n\r\n    const filename = \"dados_da_tabela_filtrado.txt\";\r\n    const data = linhasFiltradas.join(\"\\n\");\r\n\r\n    // Escrever os dados em um arquivo de texto\r\n    fs.writeFile(filename, data, \"utf8\", (err) => {\r\n      if (err) {\r\n        console.error(\"Erro ao escrever arquivo:\", err);\r\n        return callback(err);\r\n      }\r\n      console.log(`Os dados foram exportados para ${filename}.`);\r\n      return callback(null, filename);\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Erro ao exportar dados:\", err);\r\n    const error = err instanceof Error ? err : new Error(\"Erro desconhecido\");\r\n    return callback(error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\n// Função para formatar o tempo\r\nconst formatarTempo = (tempo: Date | null | undefined): string => {\r\n  if (!tempo) return \"\"; // Retorna uma string vazia se o tempo for nulo ou indefinido\r\n\r\n  const data = new Date(tempo);\r\n  const horas = data.getHours().toString().padStart(2, \"0\");\r\n  const minutos = data.getMinutes().toString().padStart(2, \"0\");\r\n  return `${horas}:${minutos}`;\r\n};\r\n\r\n// Função para ajustar o fuso horário para o fuso horário local\r\nconst ajustarFusoHorario = (tempo: Date | null | undefined, ajuste: number): Date | null | undefined => {\r\n  if (!tempo) return tempo; // Retorna o tempo original se for nulo ou indefinido\r\n\r\n  // Converter o ajuste de horas para milissegundos\r\n  const ajusteMs = ajuste * 60 * 60 * 1000;\r\n\r\n  // Ajustar o tempo para o fuso horário local\r\n  return new Date(tempo.getTime() + ajusteMs);\r\n};\r\n\r\n// Função para formatar a data sem hífens\r\nconst formatarData = (data: Date): string => {\r\n  const ano = data.getFullYear();\r\n  const mes = (data.getMonth() + 1).toString().padStart(2, \"0\");\r\n  const dia = data.getDate().toString().padStart(2, \"0\");\r\n  return `${ano}${mes}${dia}`;\r\n};\r\n","import { exportarDadosDemitidosParaArquivo } from \"../../../main/expotações-demitidos/exportar-dados\";\r\nimport { badRequest } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./export-protocols\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\n\r\nexport class ExportarDemitidosController implements Controller {\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { identificacao, localidade } = httpRequest.query;\r\n\r\n      if (!identificacao) return badRequest(new FuncionarioParamError(\"identificacao não fornecido!\"));\r\n      if (!localidade) return badRequest(new FuncionarioParamError(\"localidade não fornecido!\"));\r\n\r\n      return new Promise((resolve) => {\r\n        exportarDadosDemitidosParaArquivo(\r\n          (err: Error | null, filename?: string) => {\r\n            if (err) {\r\n              console.error(\"Erro ao exportar dados:\", err);\r\n              return resolve({\r\n                statusCode: 500,\r\n                body: \"Erro ao exportar dados.\",\r\n              });\r\n            }\r\n\r\n            resolve({\r\n              statusCode: 200,\r\n              body: \"Arquivo exportado com sucesso\",\r\n            });\r\n          },\r\n          identificacao,\r\n          localidade,\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro no controller:\", error);\r\n      return {\r\n        statusCode: 500,\r\n        body: \"Erro no servidor.\",\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { Router } from \"express\";\r\n\r\nimport { ExportarDemitidosController } from \"../../../presentation/controllers/exportar-demitidos/exportar-lancamentos\";\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/exportarDemitidos-lancamentos\", adaptRoute(new ExportarDemitidosController()));\r\n};\r\n\r\nexport default route;\r\n","import fs from \"fs\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const exportarDadosParaArquivo = async (callback: (err: Error | null, filename?: string) => void) => {\r\n  try {\r\n    // Buscar os dados das tabelas\r\n    const funcionarios = await prisma.funcionario.findMany({\r\n      include: {\r\n        cartao: {\r\n          include: {\r\n            cartao_dia: {\r\n              include: {\r\n                cartao_dia_lancamentos: {\r\n                  orderBy: {\r\n                    entrada: \"asc\", // Ordena os lançamentos por entrada em ordem crescente\r\n                  },\r\n                },\r\n              },\r\n              orderBy: {\r\n                data: \"asc\", // Ordena os dias de cartão por data em ordem crescente\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Preparar os dados para o arquivo\r\n    const linhas = funcionarios.flatMap((funcionario) => {\r\n      return funcionario.cartao.flatMap((cartao) => {\r\n        return cartao.cartao_dia.map((dia) => {\r\n          const lancamentos = dia.cartao_dia_lancamentos;\r\n          // Verificar se há lançamentos para este dia\r\n          if (lancamentos && lancamentos.length > 0) {\r\n            const entradasSaidas = lancamentos\r\n              .map((lancamento) => {\r\n                // Ajustar para o fuso horário local antes de formatar o tempo\r\n                const entradaLocal = ajustarFusoHorario(lancamento.entrada, 3); // Ajuste de 3 horas\r\n                const saidaLocal = ajustarFusoHorario(lancamento.saida, 3); // Ajuste de 3 horas\r\n                const entrada = formatarTempo(entradaLocal);\r\n                const saida = formatarTempo(saidaLocal);\r\n                return `${entrada};${saida}`;\r\n              })\r\n              .join(\";\");\r\n\r\n            return `${funcionario.identificacao};${formatarData(dia.data)};${entradasSaidas}`;\r\n          } else {\r\n            // Se não houver lançamentos, retornar uma string vazia\r\n            return \"\";\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // Filtrar as linhas para remover as linhas vazias\r\n    const linhasFiltradas = linhas.filter((linha) => linha !== \"\");\r\n\r\n    const filename = \"dados_da_tabela.txt\";\r\n    const data = linhasFiltradas.join(\"\\n\");\r\n\r\n    // Escrever os dados em um arquivo de texto\r\n    fs.writeFile(filename, data, \"utf8\", (err) => {\r\n      if (err) {\r\n        console.error(\"Erro ao escrever arquivo:\", err);\r\n        return callback(err);\r\n      }\r\n      console.log(`Os dados foram exportados para ${filename}.`);\r\n      return callback(null, filename);\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Erro ao exportar dados:\", err);\r\n    const error = err instanceof Error ? err : new Error(\"Erro desconhecido\");\r\n    return callback(error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\n// Função para formatar o tempo\r\nconst formatarTempo = (tempo: Date | null | undefined): string => {\r\n  if (!tempo) return \"\"; // Retorna uma string vazia se o tempo for nulo ou indefinido\r\n\r\n  const data = new Date(tempo);\r\n  const horas = data.getHours().toString().padStart(2, \"0\");\r\n  const minutos = data.getMinutes().toString().padStart(2, \"0\");\r\n  return `${horas}:${minutos}`;\r\n};\r\n\r\n// Função para ajustar o fuso horário para o fuso horário local\r\nconst ajustarFusoHorario = (tempo: Date | null | undefined, ajuste: number): Date | null | undefined => {\r\n  if (!tempo) return tempo; // Retorna o tempo original se for nulo ou indefinido\r\n\r\n  // Converter o ajuste de horas para milissegundos\r\n  const ajusteMs = ajuste * 60 * 60 * 1000;\r\n\r\n  // Ajustar o tempo para o fuso horário local\r\n  return new Date(tempo.getTime() + ajusteMs);\r\n};\r\n\r\n// Função para formatar a data sem hífens\r\nconst formatarData = (data: Date): string => {\r\n  const ano = data.getFullYear();\r\n  const mes = (data.getMonth() + 1).toString().padStart(2, \"0\");\r\n  const dia = data.getDate().toString().padStart(2, \"0\");\r\n  return `${ano}${mes}${dia}`;\r\n};\r\n","import fs from \"fs\";\r\n\r\nimport { exportarDadosParaArquivo } from \"../../../main/exportacoes-geral/exportar-dados\";\r\nimport { Controller, HttpResponse } from \"./export-protocols\";\r\n\r\nexport class ExportarController implements Controller {\r\n  async handle(): Promise<HttpResponse> {\r\n    return new Promise((resolve) => {\r\n      exportarDadosParaArquivo((err: Error | null, filename?: string) => {\r\n        if (err) {\r\n          console.error(\"Erro ao exportar dados:\", err);\r\n          return resolve({\r\n            statusCode: 500,\r\n            body: \"Erro ao exportar dados.\",\r\n          });\r\n        }\r\n\r\n        // Enviar o arquivo como resposta\r\n        resolve({\r\n          statusCode: 200,\r\n          body: \"Arquivo exportado com sucesso\",\r\n        });\r\n\r\n        /*         // Excluir o arquivo após a resposta (opcional, ou você pode fazer isso em outra parte do código se necessário)\r\n        fs.unlink(filename!, (err: NodeJS.ErrnoException | null) => {\r\n          if (err) {\r\n            console.error(\"Erro ao excluir arquivo:\", err);\r\n          } else {\r\n            console.log(`Arquivo ${filename} excluído.`);\r\n          }\r\n        }); */\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Router } from \"express\";\r\n\r\nimport { ExportarController } from \"../../../presentation/controllers/exportar-arquivos-geral/exporatar-lancamentos\";\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/exportar-lancamentos\", adaptRoute(new ExportarController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { GetFuncionarioIdent } from \"../../../../data/usecase/procurar-funcionario/find-procurar-funcionario\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class FuncionarioPostgresRepository implements GetFuncionarioIdent {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async findFisrt(identificacao: string, localidade: string): Promise<any> {\r\n    const funcionario = await this.prisma.funcionario.findFirst({\r\n      where: { identificacao: { endsWith: identificacao }, localidadeId: localidade },\r\n      include: {\r\n        cartao: {\r\n          include: {\r\n            cartao_dia: {\r\n              include: {\r\n                cartao_dia_lancamentos: {\r\n                  include: {\r\n                    cartao_dia_lancamento_status: true, // Inclui a tabela 'cartao_dia_lancamento_status'\r\n                  },\r\n                },\r\n                cartao_dia_status: true,\r\n              },\r\n              orderBy: { id: \"asc\" },\r\n            },\r\n            cartao_status: true,\r\n          },\r\n          orderBy: { id: \"asc\" },\r\n        },\r\n        turno: true, // Inclui a tabela 'turno' nos resultados\r\n        localidade: true, // Inclui a tabela 'localidade' nos resultados\r\n        afastamento: {\r\n          include: { funcionarios_afastados_status: true },\r\n        },\r\n      },\r\n      orderBy: { id: \"asc\" },\r\n    });\r\n\r\n    // Verifica se o funcionário foi encontrado\r\n    if (!funcionario) return undefined;\r\n\r\n    // Retorna o funcionário mapeado\r\n    return funcionario;\r\n  }\r\n}\r\n","import { CalcularResumoPostgresRepository } from \"../../../infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { FuncionarioPostgresRepository } from \"../../../infra/db/postgresdb/get-funcionario/get-funcionario\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, notFoundRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./procurra-funcionario-protocols\";\r\n\r\nexport class GetFuncionarioController implements Controller {\r\n  constructor(\r\n    private readonly funcionarioPostgresRepository: FuncionarioPostgresRepository,\r\n    private readonly calcularResumoPostgresRepository: CalcularResumoPostgresRepository,\r\n  ) {}\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { identificacao, localidade } = httpRequest?.query;\r\n\r\n      if (!identificacao) return badRequest(new FuncionarioParamError(\"identificacao não fornecido!\"));\r\n      if (!localidade) return badRequest(new FuncionarioParamError(\"localidade não fornecido!\"));\r\n\r\n      const funcionario = await this.funcionarioPostgresRepository.findFisrt(identificacao, localidade);\r\n\r\n      // Verifica se nenhum funcionário foi encontrado\r\n      if (!funcionario) return notFoundRequest({ message: \"Identificador não encontrado\", name: \"Error\" });\r\n\r\n      // Calcular o resumo\r\n      const resumoCalculado = await this.calcularResumoPostgresRepository.calc(identificacao);\r\n\r\n      // Retorna o(s) funcionário(s) encontrado(s) juntamente com a mensagem e o resumo\r\n      return ok({ message: \"Identificador encontrado com sucesso\", data: funcionario, resumo: resumoCalculado });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { FuncionarioPostgresRepository } from \"../../infra/db/postgresdb/get-funcionario/get-funcionario\";\r\nimport { GetFuncionarioController } from \"../../presentation/controllers/procurar-funcionário/procurar-funcionário\";\r\nimport { CalcularResumoPostgresRepository } from \"../../infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeGetFuncionarioController = (): Controller => {\r\n  const funcionarioPostgresRepository = new FuncionarioPostgresRepository();\r\n  const calcularResumoPostgresRepository = new CalcularResumoPostgresRepository();\r\n  const getFuncionarioController = new GetFuncionarioController(funcionarioPostgresRepository, calcularResumoPostgresRepository);\r\n  return new LogControllerDecorator(getFuncionarioController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeGetFuncionarioController } from \"../../factories/get-funcionario\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/funcionario\", adaptRoute(makeGetFuncionarioController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { LancarDia } from \"../../../../data/usecase/lancar-dia/lancar-dia\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class LancarDiaPostgresRepository implements LancarDia {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async upsert(input: {\r\n    periodoId: number;\r\n    entrada: Date;\r\n    saida: Date;\r\n    cartao_dia_id: number;\r\n    statusId: number;\r\n    diferenca: number;\r\n    userName: string;\r\n  }): Promise<boolean> {\r\n    return Boolean(\r\n      await this.prisma.cartao_dia_lancamento.upsert({\r\n        where: { cartao_dia_id_periodoId: { cartao_dia_id: input.cartao_dia_id, periodoId: input.periodoId } },\r\n        create: {\r\n          entrada: input.entrada,\r\n          saida: input.saida,\r\n          periodoId: input.periodoId,\r\n          cartao_dia_id: input.cartao_dia_id,\r\n          statusId: input.statusId,\r\n          diferenca: input.diferenca,\r\n          userName: input.userName,\r\n        },\r\n        update: {\r\n          entrada: input.entrada,\r\n          saida: input.saida,\r\n          periodoId: input.periodoId,\r\n          cartao_dia_id: input.cartao_dia_id,\r\n          statusId: input.statusId,\r\n          diferenca: input.diferenca,\r\n          userName: input.userName,\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  public async findConflictingPeriodos(entrada: Date, saida: Date, cartao_dia_id: number, periodoId: number): Promise<any[]> {\r\n    return await this.prisma.cartao_dia_lancamento.findMany({\r\n      where: {\r\n        cartao_dia_id,\r\n        periodoId: { not: periodoId },\r\n        AND: [{ entrada: { lt: saida } }, { saida: { gt: entrada } }],\r\n      },\r\n    });\r\n  }\r\n\r\n  public async findCartaoDiaById(cartao_dia_id: number): Promise<any> {\r\n    return await this.prisma.cartao_dia.findUnique({\r\n      where: { id: cartao_dia_id },\r\n    });\r\n  }\r\n}\r\n","import { LancarDiaPostgresRepository } from \"@infra/db/postgresdb/lancar-dia/lancar-dia\";\r\n\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./lancar-dia-protocols\";\r\n\r\nexport class LancarDiaController implements Controller {\r\n  constructor(private readonly lancarDiaPostgresRepository: LancarDiaPostgresRepository) {}\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { periodoId, entrada, saida, cartao_dia_id, userName } = httpRequest?.body;\r\n\r\n      if (!periodoId) return badRequest(new FuncionarioParamError(\"Falta id do periodo!\"));\r\n      if (!entrada) return badRequest(new FuncionarioParamError(\"Falta entrada!\"));\r\n      if (!saida) return badRequest(new FuncionarioParamError(\"Falta saida!\"));\r\n      if (!cartao_dia_id) return badRequest(new FuncionarioParamError(\"Falta sequencia do cartão!\"));\r\n      if (!userName) return badRequest(new FuncionarioParamError(\"Falta usuário para lançar cartão\"));\r\n\r\n      const entradaDate = new Date(entrada);\r\n      const saidaDate = new Date(saida);\r\n\r\n      if (isNaN(entradaDate.getTime()) || isNaN(saidaDate.getTime())) {\r\n        return badRequest(new FuncionarioParamError(\"Formato de data inválido!\"));\r\n      }\r\n\r\n      // Verificar a data do cartao_dia e cartao_dia_lancamentos\r\n      const cartaoDia = await this.lancarDiaPostgresRepository.findCartaoDiaById(cartao_dia_id);\r\n      if (!cartaoDia) {\r\n        return badRequest(new FuncionarioParamError(\"Cartão do dia não encontrado!\"));\r\n      }\r\n\r\n      const cartaoDiaDate = new Date(cartaoDia.data);\r\n      const cartaoDiaDateStr = cartaoDiaDate.toISOString().split(\"T\")[0];\r\n      const entradaDateStr = entradaDate.toISOString().split(\"T\")[0];\r\n      const saidaDateStr = saidaDate.toISOString().split(\"T\")[0];\r\n\r\n      if (entradaDate < cartaoDiaDate || saidaDate < cartaoDiaDate) {\r\n        return badRequest(new FuncionarioParamError(\"Data divergente entre o cartão do dia e o lançamento!\"));\r\n      }\r\n\r\n      // Verificar se há conflitos de períodos\r\n      const conflictingPeriodos = await this.lancarDiaPostgresRepository.findConflictingPeriodos(\r\n        entradaDate,\r\n        saidaDate,\r\n        cartao_dia_id,\r\n        periodoId,\r\n      );\r\n      if (conflictingPeriodos.length > 0) {\r\n        return badRequest(new FuncionarioParamError(\"Período já existente!\"));\r\n      }\r\n\r\n      // Calculando a diferença em minutos entre entrada e saída\r\n      const diferenca = this.calcularDiferencaMinutos(entradaDate, saidaDate);\r\n\r\n      const saved = await this.lancarDiaPostgresRepository.upsert({\r\n        cartao_dia_id,\r\n        entrada: entradaDate,\r\n        periodoId,\r\n        saida: saidaDate,\r\n        statusId: 1,\r\n        diferenca,\r\n        userName,\r\n      });\r\n\r\n      if (!saved) throw \"Erro ao salvar lançamento!\";\r\n\r\n      return ok({ message: \"Salvo com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n\r\n  private calcularDiferencaMinutos(entrada: Date, saida: Date): number {\r\n    const diferencaMs = saida.getTime() - entrada.getTime();\r\n    // Convertendo a diferença de milissegundos para minutos arredondando para cima\r\n    const diferencaMinutos = Math.ceil(diferencaMs / (1000 * 60));\r\n    return diferencaMinutos;\r\n  }\r\n}\r\n","import { LancarDiaPostgresRepository } from \"@infra/db/postgresdb/lancar-dia/lancar-dia\";\r\n\r\nimport { LancarDiaController } from \"../../presentation/controllers/lancar-dia/lancar-dia\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeLancarDiaController = (): Controller => {\r\n  const lancarDiaPostgresRepository = new LancarDiaPostgresRepository();\r\n  const lancarDiaController = new LancarDiaController(lancarDiaPostgresRepository);\r\n  return new LogControllerDecorator(lancarDiaController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeLancarDiaController } from \"../../factories/lancar-dia\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/lancar-dia\", adaptRoute(makeLancarDiaController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport { ListarAtestado } from \"../../../../data/usecase/add-listar-atestados/add-listar-atestados\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class ListarAtestadoRepsository implements ListarAtestado {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async list(): Promise<{ id: number }[]> {\r\n    return await this.prisma.atestado_funcionario.findMany({\r\n      where: {\r\n        tipo_status: {\r\n          id: 1, // Assumindo que 'tipo_status' é uma relação e você quer filtrar pelo campo 'id' dentro dela\r\n        },\r\n      },\r\n      include: {\r\n        funcionario: true,\r\n        tipo_acompanhante: true,\r\n        tipo_ocupacao: true,\r\n        tipo_status: true,\r\n        tipos_documentos: true,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { ListarAtestadoRepsository } from \"@infra/db/postgresdb/listar-atestados/listar-atestados\";\r\n\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpResponse } from \"./listar-atestados-protocols\";\r\n\r\nexport class ListarAtestadoController implements Controller {\r\n  constructor(private readonly AtestadoPostgresRepository: ListarAtestadoRepsository) {}\r\n\r\n  async handle(): Promise<HttpResponse> {\r\n    try {\r\n      const atestados = await this.AtestadoPostgresRepository.list();\r\n\r\n      // Envolver o resultado em um objeto chamado data\r\n      return ok({ atestados });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ListarAtestadoRepsository } from \"@infra/db/postgresdb/listar-atestados/listar-atestados\";\r\n\r\nimport { ListarAtestadoController } from \"../../presentation/controllers/listar-atestados/listar-atestados-controler\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeListarAtestadosController = (): Controller => {\r\n  const listarAtestadoRepsository = new ListarAtestadoRepsository();\r\n  const listarAtestadoController = new ListarAtestadoController(listarAtestadoRepsository);\r\n  return new LogControllerDecorator(listarAtestadoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeListarAtestadosController } from \"../../factories/listar-atestados\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/listar-atestado\", adaptRoute(makeListarAtestadosController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { ListarDescricaco } from \"../../../../data/usecase/add-listar-descricacao/add-listar-descricao\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class ListarDescricacoRepsository implements ListarDescricaco {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async list(): Promise<{ descricaco: string }[]> {\r\n    return await this.prisma.descricaco_cid.findMany();\r\n  }\r\n}\r\n","import { ListarDescricacoRepsository } from \"@infra/db/postgresdb/listar-descricacao-repository/listar-descricacao-repository\";\r\n\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpResponse } from \"./listar-descricacao-protocols\";\r\n\r\nexport class ListarDescricacoController implements Controller {\r\n  constructor(private readonly CIDPostgresRepository: ListarDescricacoRepsository) {}\r\n\r\n  async handle(): Promise<HttpResponse> {\r\n    try {\r\n      const descricaco = await this.CIDPostgresRepository.list();\r\n\r\n      // Envolver o resultado em um objeto chamado data\r\n      return ok({ descricaco });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ListarDescricacoRepsository } from \"@infra/db/postgresdb/listar-descricacao-repository/listar-descricacao-repository\";\r\n\r\nimport { ListarDescricacoController } from \"../../presentation/controllers/listar-descricacao/listar-descricacao-controler\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeDescricacoController = (): Controller => {\r\n  const listarDescricacoRepsository = new ListarDescricacoRepsository();\r\n  const listarDescricacoController = new ListarDescricacoController(listarDescricacoRepsository);\r\n  return new LogControllerDecorator(listarDescricacoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeDescricacoController } from \"../../factories/listar-descricacao\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/descricacao\", adaptRoute(makeDescricacoController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { ListarFilial } from \"../../../../data/usecase/add-listar-atestados/add-listar-atestados\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class ListarFilialRepsository implements ListarFilial {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  // Corrigido para retornar uma lista de filiais\r\n  public async listFilial(): Promise<{ filial: string }[]> {\r\n    return await this.prisma.funcionario.findMany({\r\n      distinct: ['filial'],\r\n      select: {\r\n        filial: true\r\n      }\r\n    });\r\n  }\r\n\r\n  public async listByFilial(filial: string): Promise<{ id: number, identificacao: string, nome: string, funcao: string }[]> {\r\n    return await this.prisma.funcionario.findMany({\r\n      where: {\r\n        filial: filial\r\n      },\r\n      select: {\r\n        id: true,\r\n        identificacao: true,\r\n        nome: true,\r\n        funcao: {\r\n          select: {\r\n            nome: true\r\n          }\r\n        }\r\n      }\r\n    }).then(funcionarios => funcionarios.map(func => ({\r\n      id: func.id,\r\n      identificacao: func.identificacao,\r\n      nome: func.nome,\r\n      funcao: func.funcao.nome\r\n    })));\r\n  }\r\n}\r\n","import { ListarFilialRepsository } from \"@infra/db/postgresdb/listar-filial-repository/listar-status-lancamento-repository\";\r\n\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./listar-filial\";\r\n\r\nexport class ListarStatusController implements Controller {\r\n  constructor(private readonly listarFilialRepsository: ListarFilialRepsository) { }\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { filial } = httpRequest.query;\r\n\r\n      if (!filial) {\r\n        return badRequest(new FuncionarioParamError(\"Filial não fornecida\"));\r\n      }\r\n\r\n      const funcionarios = await this.listarFilialRepsository.listByFilial(filial);\r\n\r\n      return ok({ funcionarios });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ListarFilialRepsository } from \"@infra/db/postgresdb/listar-filial-repository/listar-status-lancamento-repository\";\r\n\r\nimport { ListarStatusController } from \"../../presentation/controllers/listar-filial/listar-filial-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeListarFilialController = (): Controller => {\r\n  const listarFilialRepsository = new ListarFilialRepsository();\r\n  const listarStatusController = new ListarStatusController(listarFilialRepsository);\r\n  return new LogControllerDecorator(listarStatusController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeListarFilialController } from \"../../factories/listar-filial\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/listar-filial\", adaptRoute(makeListarFilialController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { ListarOcorrenciasGeral } from \"../../../../data/usecase/listar-ocorrencias/add-listar-ocorrencias\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class OcorrenciaGeralPostgresRepository implements ListarOcorrenciasGeral {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async findOcorrencia(localidade: string): Promise<{\r\n    funcionarios: {\r\n      identificacao: string;\r\n      nome: string;\r\n    }[];\r\n  }> {\r\n    const funcionarios = await this.prisma.funcionario.findMany({\r\n      where: { localidadeId: localidade },\r\n      include: {\r\n        cartao: {\r\n          include: {\r\n            cartao_dia: {\r\n              include: {\r\n                eventos: {\r\n                  where: { tipoId: 2, tratado: false },\r\n                },\r\n              },\r\n              orderBy: { id: \"asc\" },\r\n            },\r\n          },\r\n          orderBy: { id: \"asc\" },\r\n        },\r\n      },\r\n      orderBy: { id: \"asc\" },\r\n    });\r\n\r\n    if (!funcionarios) return { funcionarios: [] };\r\n\r\n    return {\r\n      funcionarios: funcionarios\r\n        .map((funcionario) => {\r\n          const hasValidEvent = funcionario.cartao.some((cartao) =>\r\n            cartao.cartao_dia.some((cartao_dia) => cartao_dia.eventos.length > 0),\r\n          );\r\n\r\n          if (hasValidEvent) {\r\n            return {\r\n              identificacao: funcionario.identificacao,\r\n              nome: funcionario.nome,\r\n            };\r\n          }\r\n          return null;\r\n        })\r\n        .filter((funcionario) => funcionario !== null) as {\r\n        identificacao: string;\r\n        nome: string;\r\n      }[],\r\n    };\r\n  }\r\n}\r\n","import { OcorrenciaGeralPostgresRepository } from \"../../../infra/db/postgresdb/listar-ocorrencias-geral/listar-ocorrencias-repository\";\r\nimport { badRequest, notFoundRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./listar-ocorrencias-protocols\";\r\n\r\nexport class OcorrenciaGeralController implements Controller {\r\n  constructor(private readonly ocorrenciaGeralPostgresRepository: OcorrenciaGeralPostgresRepository) {}\r\n\r\n  async handle(httRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { localidade } = httRequest?.query;\r\n\r\n      if (!localidade) {\r\n        return badRequest(new Error(\"Localidade não informada\"));\r\n      }\r\n\r\n      const data = await this.ocorrenciaGeralPostgresRepository.findOcorrencia(localidade);\r\n\r\n      if (data.funcionarios.length === 0) {\r\n        return notFoundRequest(new Error(\"Nenhum funcionário encontrado\"));\r\n      }\r\n\r\n      const output = data.funcionarios.map((funcionario) => ({\r\n        nome: funcionario.nome,\r\n        identificacao: funcionario.identificacao,\r\n      }));\r\n\r\n      return ok(output);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { OcorrenciaGeralPostgresRepository } from \"../../infra/db/postgresdb/listar-ocorrencias-geral/listar-ocorrencias-repository\";\r\nimport { OcorrenciaGeralController } from \"../../presentation/controllers/listar-ocorrencia-geral/listar-ocorrencia-geral-controler\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeListarOcorrenciaGeralController = (): Controller => {\r\n  const ocorrenciaGeralPostgresRepository = new OcorrenciaGeralPostgresRepository();\r\n  const ocorrenciaGeralController = new OcorrenciaGeralController(ocorrenciaGeralPostgresRepository);\r\n  return new LogControllerDecorator(ocorrenciaGeralController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeListarOcorrenciaGeralController } from \"../../factories/listar-ocorrencia-geral\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/ocorrencia-geral\", adaptRoute(makeListarOcorrenciaGeralController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport { ListarOcorrencias } from \"../../../../data/usecase/listar-ocorrencias/add-listar-ocorrencias\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\nimport { arredondarParteDecimalHoras } from \"../eventos/utils\";\r\n\r\nexport class OcorrenciaPostgresRepository implements ListarOcorrencias {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  private calcularResumo(dias: any[]) {\r\n    let somaMovimentacao60 = 0;\r\n    let somaMovimentacao100 = 0;\r\n    let somaMovimentacaoNoturna60 = 0;\r\n    let somaMovimentacaoNoturna100 = 0;\r\n    const saldoAnterior = { sessenta: 0, cem: 0 };\r\n    let horasDiurno60 = 0;\r\n    let horasDiurno100 = 0;\r\n    let horasNoturno60 = 0;\r\n    let horasNoturno100 = 0;\r\n\r\n    for (const dia of dias) {\r\n      const resumoDia = dia.ResumoDia || {\r\n        movimentacao60: 0,\r\n        movimentacao100: 0,\r\n        movimentacaoNoturna60: 0,\r\n        movimentacaoNoturna100: 0,\r\n      };\r\n\r\n      if (\r\n        typeof resumoDia.movimentacao60 === \"number\" &&\r\n        typeof resumoDia.movimentacao100 === \"number\" &&\r\n        typeof resumoDia.movimentacaoNoturna60 === \"number\" &&\r\n        typeof resumoDia.movimentacaoNoturna100 === \"number\"\r\n      ) {\r\n        if (resumoDia.movimentacao60) somaMovimentacao60 += resumoDia.movimentacao60;\r\n        if (resumoDia.movimentacao100) somaMovimentacao100 += resumoDia.movimentacao100;\r\n        if (resumoDia.movimentacaoNoturna60) somaMovimentacaoNoturna60 += resumoDia.movimentacaoNoturna60;\r\n        if (resumoDia.movimentacaoNoturna100) somaMovimentacaoNoturna100 += resumoDia.movimentacaoNoturna100;\r\n      }\r\n    }\r\n\r\n    horasDiurno60 = arredondarParteDecimalHoras(somaMovimentacao60 / 60);\r\n    horasDiurno100 = arredondarParteDecimalHoras(somaMovimentacao100 / 60);\r\n    horasNoturno60 = arredondarParteDecimalHoras(somaMovimentacaoNoturna60 / 60);\r\n    horasNoturno100 = arredondarParteDecimalHoras(somaMovimentacaoNoturna100 / 60);\r\n\r\n    return {\r\n      movimentacao: {\r\n        sessenta: somaMovimentacao60 + somaMovimentacaoNoturna60,\r\n        cem: somaMovimentacao100 + somaMovimentacaoNoturna100,\r\n      },\r\n      soma: {\r\n        sessenta: saldoAnterior.sessenta + somaMovimentacao60 + somaMovimentacaoNoturna60,\r\n        cem: saldoAnterior.cem + somaMovimentacao100 + somaMovimentacaoNoturna100,\r\n      },\r\n      horas: {\r\n        diurnas: { sessenta: horasDiurno60, cem: horasDiurno100 },\r\n        noturnas: { sessenta: horasNoturno60, cem: horasNoturno100 },\r\n      },\r\n      saldoAnterior: saldoAnterior,\r\n    };\r\n  }\r\n\r\n  public async find(\r\n    identificacao: string,\r\n    localidade: string,\r\n  ): Promise<{\r\n    funcionarios: {\r\n      identificacao: string;\r\n      nome: string;\r\n      turno: { nome: string };\r\n      localidade: { codigo: string };\r\n      referencia: Date | null;\r\n      dias: {\r\n        data: Date;\r\n        eventos: any[];\r\n        lancamentos: { periodoId: number; entrada: Date | null; saida: Date | null }[];\r\n      }[];\r\n      Resumo: any;\r\n    }[];\r\n  }> {\r\n    const funcionarios = await this.prisma.funcionario.findMany({\r\n      where: {\r\n        identificacao: identificacao,\r\n        localidadeId: localidade,\r\n      },\r\n      include: {\r\n        cartao: {\r\n          select: {\r\n            referencia: true,\r\n            cartao_dia: {\r\n              include: {\r\n                eventos: true, // Aqui incluímos todos os eventos\r\n                cartao_dia_lancamentos: {\r\n                  select: {\r\n                    periodoId: true,\r\n                    entrada: true,\r\n                    saida: true,\r\n                  },\r\n                },\r\n              },\r\n              orderBy: { id: \"asc\" },\r\n            },\r\n          },\r\n          orderBy: { id: \"asc\" },\r\n        },\r\n        turno: true,\r\n        localidade: true,\r\n        afastamento: {\r\n          include: { funcionarios_afastados_status: true },\r\n        },\r\n      },\r\n      orderBy: { id: \"asc\" },\r\n    });\r\n\r\n    if (!funcionarios) return { funcionarios: [] };\r\n\r\n    return {\r\n      funcionarios: funcionarios.map((funcionario) => {\r\n        const diasComEventos = funcionario.cartao.flatMap(\r\n          (cartao) =>\r\n            cartao.cartao_dia\r\n              .map((cartao_dia) => {\r\n                const eventos = cartao_dia.eventos.filter((evento) => {\r\n                  if (evento.tipoId === 2 && !evento.tratado) return true;\r\n                  if (evento.tipoId === 8 && !evento.tratado) {\r\n                    const countTipo8 = cartao_dia.eventos.filter((e) => e.tipoId === 8).length;\r\n                    return countTipo8 > 1;\r\n                  }\r\n                  return false;\r\n                });\r\n\r\n                return {\r\n                  data: cartao_dia.data,\r\n                  eventos,\r\n                  lancamentos: cartao_dia.cartao_dia_lancamentos.map((lancamento) => ({\r\n                    periodoId: lancamento.periodoId,\r\n                    entrada: lancamento.entrada,\r\n                    saida: lancamento.saida,\r\n                  })),\r\n                };\r\n              })\r\n              .filter((dia) => dia.eventos.length > 0), // Filtra dias sem eventos\r\n        );\r\n\r\n        const resumo = this.calcularResumo(diasComEventos);\r\n\r\n        return {\r\n          identificacao: funcionario.identificacao,\r\n          nome: funcionario.nome,\r\n          turno: funcionario.turno,\r\n          localidade: funcionario.localidade,\r\n          referencia: funcionario.cartao.length > 0 ? funcionario.cartao[0].referencia : null,\r\n          dias: diasComEventos,\r\n          Resumo: resumo,\r\n        };\r\n      }),\r\n    };\r\n  }\r\n}\r\n","import { CalcularResumoPostgresRepository } from \"@infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { ResumoModel } from \"@domain/models/calcular-resumo\";\r\nimport { OcorrenciaPostgresRepository } from \"../../../infra/db/postgresdb/listar-ocorrencias/listar-ocorrencias-repository\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, notFoundRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./listar-ocorrencias-protocols\";\r\n\r\nexport class OcorrenciaController implements Controller {\r\n  constructor(\r\n    private readonly ocorrenciaPostgresRepository: OcorrenciaPostgresRepository,\r\n    private readonly calcularResumoPostgresRepository: CalcularResumoPostgresRepository,\r\n  ) {}\r\n\r\n  async handle(httRequest: HttpRequest): Promise<HttpResponse> {\r\n    try {\r\n      const { identificacao, localidade } = httRequest?.query;\r\n\r\n      if (!localidade) {\r\n        return badRequest(new FuncionarioParamError(\"Localidade não fornecida\"));\r\n      }\r\n      if (!identificacao) {\r\n        return badRequest(new FuncionarioParamError(\"Identificação não fornecida\"));\r\n      }\r\n\r\n      const data = await this.ocorrenciaPostgresRepository.find(identificacao, localidade);\r\n\r\n      if (data.funcionarios.length === 0) {\r\n        return notFoundRequest(new Error(\"Nenhum funcionário encontrado\"));\r\n      }\r\n\r\n      const output: {\r\n        identificacao: string;\r\n        nome: string;\r\n        nomeTurno: string;\r\n        codigoLocalidade: string;\r\n        referencia: Date | null;\r\n        dias: {\r\n          data: Date;\r\n          eventos: any[];\r\n          lancamentos: {\r\n            periodoId: number;\r\n            entrada: Date | null;\r\n            saida: Date | null;\r\n          }[];\r\n        }[];\r\n        resumo: ResumoModel;\r\n      }[] = [];\r\n\r\n      for (const funcionario of data.funcionarios) {\r\n        if (funcionario.dias.length === 0) continue;\r\n\r\n        output.push({\r\n          identificacao: funcionario.identificacao,\r\n          nome: funcionario.nome,\r\n          nomeTurno: funcionario.turno?.nome ?? \"\",\r\n          codigoLocalidade: funcionario.localidade?.codigo ?? \"\",\r\n          referencia: funcionario.referencia,\r\n          dias: funcionario.dias.map((dia) => ({\r\n            data: dia.data,\r\n            eventos: dia.eventos,\r\n            lancamentos: dia.lancamentos,\r\n          })),\r\n          resumo: funcionario.Resumo, // Usando o resumo calculado diretamente\r\n        });\r\n      }\r\n\r\n      return ok(output);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { CalcularResumoPostgresRepository } from \"@infra/db/postgresdb/calcular-resumo/calcular-resumo-repository\";\r\nimport { OcorrenciaPostgresRepository } from \"../../infra/db/postgresdb/listar-ocorrencias/listar-ocorrencias-repository\";\r\nimport { OcorrenciaController } from \"../../presentation/controllers/listar-ocorrencia/listar-ocorrencia-controler\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeListarOcorrenciasController = (): Controller => {\r\n  const ocorrenciaPostgresRepository = new OcorrenciaPostgresRepository();\r\n  const calcularResumoPostgresRepository = new CalcularResumoPostgresRepository();\r\n  const ocorrenciaController = new OcorrenciaController(ocorrenciaPostgresRepository, calcularResumoPostgresRepository);\r\n  return new LogControllerDecorator(ocorrenciaController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeListarOcorrenciasController } from \"../../factories/listar-ocorrencia\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/ocorrencia\", adaptRoute(makeListarOcorrenciasController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { ProcurarSolucoes } from \"../../../../data/usecase/add-solucao-eventos/listar-tipo-solucao\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class SolucoesEventosPostgresRepository implements ProcurarSolucoes {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async list(): Promise<{ id: number; nome: string }[]> {\r\n    return await this.prisma.tipo_eventos.findMany({\r\n      where: {\r\n        id: {\r\n          in: [3, 5, 6, 7],\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { SolucoesEventosPostgresRepository } from \"@infra/db/postgresdb/listar-solucoes-eventos/listar-solucoes-eventos\";\r\n\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpResponse } from \"./listar-solucoes-eventos-protocols\";\r\n\r\nexport class ListarSolucoesEventosController implements Controller {\r\n  constructor(private readonly solucoesEventosPostgresRepository: SolucoesEventosPostgresRepository) {}\r\n\r\n  async handle(): Promise<HttpResponse> {\r\n    try {\r\n      return ok(await this.solucoesEventosPostgresRepository.list());\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { SolucoesEventosPostgresRepository } from \"@infra/db/postgresdb/listar-solucoes-eventos/listar-solucoes-eventos\";\r\n\r\nimport { ListarSolucoesEventosController } from \"../../presentation/controllers/listar-solucoes-eventos/listar-solucoes-eventos-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeTiposSolucoesController = (): Controller => {\r\n  const solucoesEventosPostgresRepository = new SolucoesEventosPostgresRepository();\r\n  const listarSolucoesEventosController = new ListarSolucoesEventosController(solucoesEventosPostgresRepository);\r\n  return new LogControllerDecorator(listarSolucoesEventosController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeTiposSolucoesController } from \"../../factories/listar-solucoes-eventos\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/tipo-evento\", adaptRoute(makeTiposSolucoesController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { ProcurarLocalidadeIdent } from \"../../../../data/usecase/procurar-funcionario/procurar-localidades\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class LocalidadePostgresRepository implements ProcurarLocalidadeIdent {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async findMany(): Promise<{ codigo: string; nome: string }[]> {\r\n    return await this.prisma.localidade.findMany();\r\n  }\r\n}\r\n","import { LocalidadePostgresRepository } from \"@infra/db/postgresdb/procurar-localidades/procurar-localidades\";\r\n\r\nimport { ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpResponse } from \"./procurra-funcionario-protocols\";\r\n\r\nexport class ProcurarLocalidadeController implements Controller {\r\n  constructor(private readonly localidadePostgresRepository: LocalidadePostgresRepository) {}\r\n\r\n  async handle(): Promise<HttpResponse> {\r\n    try {\r\n      return ok(await this.localidadePostgresRepository.findMany());\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { LocalidadePostgresRepository } from \"@infra/db/postgresdb/procurar-localidades/procurar-localidades\";\r\n\r\nimport { ProcurarLocalidadeController } from \"../../presentation/controllers/procurar-localidades/procurar-localidades\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeProcurarLocalidadeController = (): Controller => {\r\n  const localidadePostgresRepository = new LocalidadePostgresRepository();\r\n  const getFuncionarioController = new ProcurarLocalidadeController(localidadePostgresRepository);\r\n  return new LogControllerDecorator(getFuncionarioController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeProcurarLocalidadeController } from \"../../factories/procurar-localidade\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.get(\"/localidades\", adaptRoute(makeProcurarLocalidadeController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { RetornarSolucao } from \"../../../../data/usecase/add-solucao-eventos/retorno-solucao\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class RetornoSolucaoRepository implements RetornarSolucao {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async resetTratado(input: { cartaoDiaId: number }): Promise<boolean> {\r\n    const { cartaoDiaId } = input;\r\n\r\n    const eventosAtualizados = await this.prisma.eventos.updateMany({\r\n      where: { cartaoDiaId: cartaoDiaId },\r\n      data: { tratado: false },\r\n    });\r\n\r\n    return eventosAtualizados.count > 0;\r\n  }\r\n}\r\n","import { RetornoSolucaoRepository } from \"../../../infra/db/postgresdb/retorno-solucao/retorno-solucao-repository\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./retornar-solucao\";\r\n\r\nexport class RetornarSolucaoController implements Controller {\r\n  constructor(private readonly retornoSolucaoRepository: RetornoSolucaoRepository) { }\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    const { cartaoDiaId } = httpRequest?.body;\r\n\r\n    try {\r\n      if (!cartaoDiaId) return badRequest(new FuncionarioParamError(\"Falta irformar o dia!\"));\r\n\r\n      const eventosResetados = await this.retornoSolucaoRepository.resetTratado({ cartaoDiaId });\r\n\r\n      if (!eventosResetados) throw \"Erro ao resetar eventos!\";\r\n\r\n      return ok({ message: \"Eventos resetados com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { RetornoSolucaoRepository } from \"@infra/db/postgresdb/retorno-solucao/retorno-solucao-repository\";\r\n\r\nimport { RetornarSolucaoController } from \"../../presentation/controllers/retornar-solucao/retornar-solucao-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeRetornarSolucaoController = (): Controller => {\r\n  const retornoSolucaoRepository = new RetornoSolucaoRepository();\r\n  const retornarSolucaoController = new RetornarSolucaoController(retornoSolucaoRepository);\r\n  return new LogControllerDecorator(retornarSolucaoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeRetornarSolucaoController } from \"../../factories/retornar-solucao\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/retornar-solucao\", adaptRoute(makeRetornarSolucaoController()));\r\n};\r\n\r\nexport default route;\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { AdicionarSolucao } from \"../../../../data/usecase/add-solucao-eventos/add-solucao-eventos\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class SolucaoEventoRepository implements AdicionarSolucao {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async add(input: { id: number; tipoId: number }): Promise<boolean> {\r\n    const { id, tipoId } = input;\r\n\r\n    const eventoOriginal = await this.prisma.eventos.findUnique({\r\n      where: { id: id },\r\n    });\r\n\r\n    if (!eventoOriginal) {\r\n      throw new Error(\"Evento original não encontrado\");\r\n    }\r\n\r\n    let minutos;\r\n    if (tipoId === 3 || tipoId === 7) {\r\n      minutos = 0;\r\n    } else if (tipoId === 5 || tipoId === 6) {\r\n      minutos = Math.abs(eventoOriginal.minutos);\r\n    } else {\r\n      minutos = eventoOriginal.minutos;\r\n    }\r\n\r\n    // Atualizar o evento original para definir tratado como true\r\n    await this.prisma.eventos.update({\r\n      where: { id: id },\r\n      data: { tratado: true },\r\n    });\r\n\r\n    const novoEvento = await this.prisma.eventos.create({\r\n      data: {\r\n        cartaoDiaId: eventoOriginal.cartaoDiaId,\r\n        hora: eventoOriginal.hora,\r\n        tipoId: tipoId,\r\n        funcionarioId: eventoOriginal.funcionarioId,\r\n        minutos: minutos,\r\n        tratado: true, // Define tratado como true no novo evento\r\n      },\r\n    });\r\n\r\n    return !!novoEvento;\r\n  }\r\n}\r\n","import { SolucaoEventoRepository } from \"../../../infra/db/postgresdb/solucao-eventos-repository/solucao-eventos-repository\";\r\nimport { FuncionarioParamError } from \"../../errors/Funcionario-param-error\";\r\nimport { badRequest, ok, serverError } from \"../../helpers/http-helpers\";\r\nimport { Controller, HttpRequest, HttpResponse } from \"./eventos-protocols\";\r\n\r\nexport class CriarEventoController implements Controller {\r\n  constructor(private readonly solucaoEventoRepository: SolucaoEventoRepository) {}\r\n\r\n  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n    const { id, tipoId } = httpRequest?.body;\r\n\r\n    try {\r\n      if (!id) return badRequest(new FuncionarioParamError(\"Falta id do evento!\"));\r\n      if (!tipoId) return badRequest(new FuncionarioParamError(\"Falta o tipo de solução!\"));\r\n      const eventoCriado = await this.solucaoEventoRepository.add({ id, tipoId });\r\n\r\n      if (!eventoCriado) throw \"Erro ao criar evento!\";\r\n\r\n      return ok({ message: \"Evento criado com sucesso\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { SolucaoEventoRepository } from \"@infra/db/postgresdb/solucao-eventos-repository/solucao-eventos-repository\";\r\n\r\nimport { CriarEventoController } from \"../../presentation/controllers/solucao-eventos/solucao-eventos-controller\";\r\nimport { Controller } from \"../../presentation/protocols\";\r\nimport { LogControllerDecorator } from \"../decorators/log\";\r\n\r\nexport const makeSolucaoEventosController = (): Controller => {\r\n  const solucaoEventoRepository = new SolucaoEventoRepository();\r\n  const criarEventoController = new CriarEventoController(solucaoEventoRepository);\r\n  return new LogControllerDecorator(criarEventoController);\r\n};\r\n","import { Router } from \"express\";\r\n\r\nimport { adaptRoute } from \"../../adapters/express-route-adapter\";\r\nimport { makeSolucaoEventosController } from \"../../factories/solucao-eventos\";\r\n\r\nconst route = (router: Router): void => {\r\n  router.post(\"/solucao-eventos\", adaptRoute(makeSolucaoEventosController()));\r\n};\r\n\r\nexport default route;\r\n","import { Router } from \"express\";\r\nimport multer from \"multer\";\r\n\r\nimport {\r\n  importarArquivoCartao,\r\n  importarArquivoFuncionario,\r\n  importarArquivoGrupoTrabalho,\r\n  importarArquivosAfastamento,\r\n} from \"../../adapters/protheus-route-adapter\";\r\n\r\nconst upload = multer();\r\n\r\n// Rota para fazer uplod de arquivos\r\nconst route = (router: Router): void => {\r\n  router.post(\"/uploadfuncionario\", upload.single(\"arquivo\"), (req, res) => importarArquivoFuncionario(req, res));\r\n  router.post(\"/uploadcartao\", upload.single(\"arquivo\"), (req, res) => importarArquivoCartao(req, res));\r\n  router.post(\"/uploadafastamento\", upload.single(\"arquivo\"), (req, res) => importarArquivosAfastamento(req, res));\r\n  router.post(\"/uploadagrupotrabalho\", upload.single(\"arquivo\"), (req, res) => importarArquivoGrupoTrabalho(req, res));\r\n};\r\n\r\nexport default route;\r\n","import { Response } from \"express\";\r\nimport moment from \"moment\";\r\n\r\nimport { AfastamentoRepository } from \"@infra/db/postgresdb/afastamento/afastamento -repository\";\r\nimport { CartaoPostgresRepository } from \"@infra/db/postgresdb/funcionario/cartao-repository\";\r\nimport { FuncionarioPostgresRepository } from \"@infra/db/postgresdb/funcionario/funcionario-repository\";\r\nimport { GrupoDeTrabalhoRepositoryPrisma } from \"@infra/db/postgresdb/grupo-trabalho/grupo-trabalho-repository\";\r\n\r\nimport { BuscarHorarioNortunoEmMinutos } from \"../../presentation/controllers/procurar-funcionário/utils\";\r\n\r\nexport async function importarArquivoGrupoTrabalho(\r\n  req: { file?: Express.Multer.File | undefined; body: { userName: string } },\r\n  res: Response,\r\n) {\r\n  try {\r\n    if (!req.file?.buffer) {\r\n      return res.status(400).send({ error: \"Falta arquivo\" });\r\n    }\r\n\r\n    if (!req?.body?.userName) return res.status(400).send({ error: \"Falta usuário\" });\r\n\r\n    const arquivo = Buffer.from(req.file.buffer).toString(\"utf-8\");\r\n    const grupos = arquivo.split(\"\\n\");\r\n    const grupoDeTrabalhoRepositoryPrisma = new GrupoDeTrabalhoRepositoryPrisma();\r\n\r\n    for (const grupo of grupos) {\r\n      const [\r\n        ,\r\n        ,\r\n        codigoTurno,\r\n        descricaoTurno,\r\n        statusTurno,\r\n        ,\r\n        diaSemana,\r\n        tipoDia,\r\n        HoraPrimeiraEntrada,\r\n        HoraPrimeirasaida,\r\n        HoraSegundaEntrada,\r\n        HoraSegundaSaida,\r\n        HoraTerceiraEntrada,\r\n        HoraTerceiraSaida,\r\n        HoraQuartaEntrada,\r\n        HoraQuartaSaida,\r\n        TotalHorasPrimeiroPeriodo,\r\n        TotalHorasSegundoPeriodo,\r\n        TotalHorasTerceiroPeriodo,\r\n        TotalHorasQuartoPeriodo,\r\n        TotalHorasPrimeiroIntervalo,\r\n        TotalHorasSegundoIntervalo,\r\n        TotalHorasTerceiroIntervalo,\r\n        TotalHorasTrabalhadas,\r\n        TotalHorasIntervalo,\r\n        TotalHorasDia,\r\n      ] = grupo.split(\";\");\r\n\r\n      if (!codigoTurno) continue;\r\n\r\n      const saved = await grupoDeTrabalhoRepositoryPrisma.upsert({\r\n        cod_turno: codigoTurno,\r\n        descri_turno: descricaoTurno,\r\n        status_turno: statusTurno,\r\n        dia_semana: diaSemana,\r\n        tipo_dia: tipoDia,\r\n        hora_1_entrada: HoraPrimeiraEntrada,\r\n        hora_1_saida: HoraPrimeirasaida,\r\n        hora_2_entrada: HoraSegundaEntrada,\r\n        hora_2_saida: HoraSegundaSaida,\r\n        hora_3_entrada: HoraTerceiraEntrada,\r\n        hora_3_saida: HoraTerceiraSaida,\r\n        hora_4_entrada: HoraQuartaEntrada,\r\n        hora_4_saida: HoraQuartaSaida,\r\n        total_horas_1_periodo: TotalHorasPrimeiroPeriodo,\r\n        total_horas_2_periodo: TotalHorasSegundoPeriodo,\r\n        total_horas_3_periodo: TotalHorasTerceiroPeriodo,\r\n        total_horas_4_periodo: TotalHorasQuartoPeriodo,\r\n        total_horas_1_intervalo: TotalHorasPrimeiroIntervalo,\r\n        total_horas_2_intervalo: TotalHorasSegundoIntervalo,\r\n        total_horas_3_intervalo: TotalHorasTerceiroIntervalo,\r\n        total_horas_trabalhadas: TotalHorasTrabalhadas,\r\n        total_horas_intervalo: TotalHorasIntervalo,\r\n        total_horas_dia: TotalHorasDia,\r\n        userName: (req?.body?.userName || \"\").toUpperCase(),\r\n      });\r\n    }\r\n\r\n    return res.json({ message: \"Arquivo importado com sucesso\" });\r\n  } catch (error) {\r\n    console.error(\"Erro importar arquivo:\", error);\r\n    return res.status(400).json({ error: \"Erro ao importar arquivo\" });\r\n  }\r\n}\r\n\r\nexport async function importarArquivoFuncionario(\r\n  req: { file?: Express.Multer.File | undefined; body: { userName: string } },\r\n  res: Response,\r\n) {\r\n  try {\r\n    if (!req.file?.buffer) {\r\n      return res.status(400).send({ error: \"Falta arquivo\" });\r\n    }\r\n\r\n    if (!req?.body?.userName) return res.status(400).send({ error: \"Falta usuário\" });\r\n\r\n    const arquivo = Buffer.from(req.file.buffer).toString(\"utf-8\");\r\n\r\n    const funcionarios = arquivo.split(\"\\n\");\r\n    const funcionarioRepository = new FuncionarioPostgresRepository();\r\n\r\n    const errors: { identificacao: string; nome: string }[] = [];\r\n\r\n    let i = 0;\r\n    for (const funcionario of funcionarios) {\r\n      const [\r\n        ,\r\n        ,\r\n        filial,\r\n        ,\r\n        identificacao,\r\n        nome,\r\n        codigoLocalidade,\r\n        descricaoLocalidade,\r\n        codigoTurnoTrabalho,\r\n        descricaoTurno,\r\n        codCentroCusto,\r\n        descricaoCentroCusto,\r\n        codFuncao,\r\n        descricaoFuncao,\r\n        dataNascimento,\r\n        dataAdmissao,\r\n        dataDemissao,\r\n        rua,\r\n        numero,\r\n        complemento,\r\n        bairro,\r\n        cidade,\r\n        estado,\r\n        cep,\r\n        ddd,\r\n        telefone,\r\n        email,\r\n      ] = funcionario.split(\";\");\r\n\r\n      if (i === 1) if (!nome) throw \"Arquivo inválido!\";\r\n\r\n      i++;\r\n      if (!identificacao) continue;\r\n\r\n      const novaDataAdmissao = new Date(`${dataAdmissao.slice(0, 4)}-${dataAdmissao.slice(4, 6)}-${dataAdmissao.slice(6, 8)}`);\r\n      const novaDataDemissao = new Date(`${dataDemissao.slice(0, 4)}-${dataDemissao.slice(4, 6)}-${dataDemissao.slice(6, 8)}`);\r\n      const novaDataNascimento = new Date(\r\n        `${dataNascimento.slice(0, 4)}-${dataNascimento.slice(4, 6)}-${dataNascimento.slice(6, 8)}`,\r\n      );\r\n\r\n      const codigoTurnoFormatado = \"009\" + codigoTurnoTrabalho.padStart(3, \"0\");\r\n\r\n      const saved = await funcionarioRepository.upsert({\r\n        nome,\r\n        centroCusto: { nome: descricaoCentroCusto },\r\n        contato: ddd && telefone ? { numero: `${ddd} ${telefone}` } : undefined,\r\n        dataAdmissao: novaDataAdmissao,\r\n        dataDemissao: dataDemissao ? novaDataDemissao : undefined,\r\n        dataNascimento: novaDataNascimento,\r\n        email: email.replace(\"\\r\", \"\").trim() ? { nome: email.replace(\"\\r\", \"\").trim() } : undefined,\r\n        endereco: { cep, bairro, cidade, complemento, estado, numero, rua },\r\n        filial,\r\n        funcao: { nome: descricaoFuncao },\r\n        identificacao,\r\n        turno: {\r\n          nome: descricaoTurno,\r\n          cod_turno: codigoTurnoFormatado,\r\n        },\r\n        localidade: {\r\n          codigo: codigoLocalidade,\r\n          nome: descricaoLocalidade,\r\n        },\r\n        userName: (req?.body?.userName || \"\").toUpperCase(),\r\n      });\r\n      console.log(codigoTurnoFormatado);\r\n\r\n      if (!saved) {\r\n        errors.push({ identificacao, nome });\r\n      }\r\n    }\r\n\r\n    return res.json({ message: \"Arquivo importado com sucesso\", errors });\r\n  } catch (error) {\r\n    return res.send({ error }).status(400);\r\n  }\r\n}\r\n\r\nexport async function importarArquivoCartao(\r\n  req: { file?: Express.Multer.File | undefined; body: { userName: string } },\r\n  res: Response,\r\n) {\r\n  try {\r\n    if (!req.file?.buffer) {\r\n      return res.status(400).send({ error: \"Falta arquivo\" });\r\n    }\r\n\r\n    if (!req?.body?.userName) return res.status(400).send({ error: \"Falta usuário\" });\r\n\r\n    const arquivo = Buffer.from(req.file.buffer).toString(\"utf-8\");\r\n\r\n    const cartaoDias = arquivo.split(\"\\n\");\r\n    const funcionarioRepository = new FuncionarioPostgresRepository();\r\n\r\n    const cartaoPostgresRepository = new CartaoPostgresRepository();\r\n    const errors: { identificacao: string; descricao: string }[] = [];\r\n\r\n    let cartao: {\r\n      identificacao: string;\r\n      funcionarioId: number;\r\n      referencia: Date;\r\n      saldoAnterior60: number;\r\n      saldoAnterior100: number;\r\n      status: { descricao: \"IMPORTADO\"; id: 1 };\r\n      dias: {\r\n        data: Date;\r\n        periodoDescanso: number;\r\n        cargaHor: number;\r\n        cargaHorPrimeiroPeriodo: number;\r\n        cargaHorSegundoPeriodo: number;\r\n        cargaHorariaCompleta: string;\r\n        cargaHorNoturna: number;\r\n        status: {\r\n          id: number;\r\n          descricao: string;\r\n        };\r\n      }[];\r\n      userName: string;\r\n    } = {\r\n      identificacao: \"\",\r\n      funcionarioId: 0,\r\n      referencia: new Date(),\r\n      saldoAnterior60: 0,\r\n      saldoAnterior100: 0,\r\n      status: { id: 1, descricao: \"IMPORTADO\" },\r\n      dias: [],\r\n      userName: (req?.body?.userName || \"\").toUpperCase(),\r\n    };\r\n\r\n    for (const dia of cartaoDias) {\r\n      const [\r\n        ,\r\n        ,\r\n        identificacao,\r\n        referencia,\r\n        data,\r\n        codStatus,\r\n        descricaoStatus,\r\n        primeiraEntrada,\r\n        primeiraSaida,\r\n        segundaEntrada,\r\n        segundaSaida,\r\n        descansoSemFormato,\r\n      ] = dia.split(\";\");\r\n\r\n      if (!identificacao) continue;\r\n      const descanso = descansoSemFormato.replace(\"\\r\", \"\");\r\n\r\n      if (identificacao !== cartao.identificacao) {\r\n        if (cartao.identificacao !== \"\") {\r\n          await cartaoPostgresRepository.upsert(cartao);\r\n        }\r\n\r\n        cartao.identificacao = identificacao;\r\n        cartao.saldoAnterior100 = 0;\r\n        cartao.saldoAnterior60 = 0;\r\n        cartao.status = { id: 1, descricao: \"IMPORTADO\" };\r\n        cartao.referencia = moment(`${referencia.slice(0, 4)}-${data.slice(4, 6)}-01`)\r\n          .add(1, \"M\")\r\n          .utc(true)\r\n          .toDate();\r\n\r\n        cartao.dias = [];\r\n\r\n        const existeFuncionario = await funcionarioRepository.findFisrt({ identificacao });\r\n        if (!existeFuncionario) {\r\n          errors.push({ identificacao, descricao: `Funcionário não encontrado pela identificação ${identificacao}` });\r\n\r\n          continue;\r\n        }\r\n\r\n        cartao.funcionarioId = existeFuncionario.id;\r\n      }\r\n\r\n      const dataAtual = moment(new Date(`${data.slice(0, 4)}-${data.slice(4, 6)}-${data.slice(6, 8)}`)).utc(false);\r\n\r\n      const [hora, minutos] = descanso.split(\".\");\r\n\r\n      let descansoEmMinutos = Number(hora) * 60 + Number(minutos);\r\n\r\n      let cargaHor = 0,\r\n        cargaHorPrimeiroPeriodo = 0,\r\n        cargaHorSegundoPeriodo = 0,\r\n        cargaHorNoturna = 0;\r\n\r\n      //Acha carga horaria primeiro periodo\r\n      {\r\n        const [horaEntrada, minutosEntrada] = primeiraEntrada.split(\".\");\r\n        const [horaSaida, minutosSaida] = primeiraSaida.split(\".\");\r\n        const dataEntrada = moment(dataAtual).hour(Number(horaEntrada)).minutes(Number(minutosEntrada));\r\n        const dataSaida = moment(dataAtual).hour(Number(horaSaida)).minutes(Number(minutosSaida));\r\n\r\n        if (dataEntrada.isAfter(dataSaida)) dataSaida.add(1, \"d\");\r\n\r\n        cargaHorPrimeiroPeriodo = dataSaida.diff(dataEntrada, \"minutes\");\r\n        cargaHorNoturna += BuscarHorarioNortunoEmMinutos(moment(data), dataEntrada, dataSaida);\r\n      }\r\n\r\n      //Acha carga horaria segundo periodo\r\n      {\r\n        const [horaEntrada, minutosEntrada] = segundaEntrada.split(\".\");\r\n        const [horaSaida, minutosSaida] = segundaSaida.split(\".\");\r\n        const dataEntrada = moment(dataAtual).hour(Number(horaEntrada)).minutes(Number(minutosEntrada));\r\n        const dataSaida = moment(dataAtual).hour(Number(horaSaida)).minutes(Number(minutosSaida));\r\n\r\n        const dataPrimeiraEntrada = moment(dataAtual)\r\n          .hour(Number(primeiraEntrada.split(\".\")[0]))\r\n          .minutes(Number(primeiraEntrada.split(\".\")[1]));\r\n\r\n        if (dataPrimeiraEntrada.isAfter(dataEntrada)) dataEntrada.add(1, \"d\");\r\n\r\n        if (dataEntrada.isAfter(dataSaida)) dataSaida.add(1, \"d\");\r\n\r\n        cargaHorSegundoPeriodo = dataSaida.diff(dataEntrada, \"minutes\");\r\n        cargaHorNoturna += BuscarHorarioNortunoEmMinutos(moment(data), dataEntrada, dataSaida);\r\n      }\r\n\r\n      cargaHor = cargaHorPrimeiroPeriodo + cargaHorSegundoPeriodo;\r\n\r\n      cartao.dias.push({\r\n        status: { descricao: descricaoStatus, id: Number(codStatus) },\r\n        data: dataAtual.toDate(),\r\n        cargaHorariaCompleta: `${primeiraEntrada};${primeiraSaida};${segundaEntrada};${segundaSaida};${descanso}`,\r\n        periodoDescanso: descansoEmMinutos,\r\n        cargaHor,\r\n        cargaHorPrimeiroPeriodo,\r\n        cargaHorSegundoPeriodo,\r\n        cargaHorNoturna,\r\n      });\r\n    }\r\n\r\n    return res.json({ message: \"Arquivo importado com sucesso\", errors });\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return res.send(error).status(400);\r\n  }\r\n}\r\n\r\nexport async function importarArquivosAfastamento(\r\n  req: { file?: Express.Multer.File | undefined; body: { userName: string } },\r\n  res: Response,\r\n) {\r\n  try {\r\n    if (!req.file?.buffer) {\r\n      return res.status(400).send({ error: \"falta arquivo\" });\r\n    }\r\n\r\n    if (!req?.body.userName) return res.status(400).send({ error: \"Falta usuário\" });\r\n\r\n    const arquivo = Buffer.from(req.file.buffer).toString(\"utf-8\");\r\n\r\n    const afastamento = arquivo.split(\"\\n\");\r\n    const funcionarioPostgresRepository = new FuncionarioPostgresRepository();\r\n\r\n    const afastamentoRepository = new AfastamentoRepository();\r\n    const errors: { identificacao: string; descricao: string }[] = [];\r\n\r\n    for (const afastado of afastamento) {\r\n      const [, , identificacao, cadStatus, descricaoStatus, inicioAfastamento, fimAfastamento, totalAfastamento] =\r\n        afastado.split(\";\");\r\n\r\n      if (!identificacao) continue;\r\n\r\n      const existeFuncionario = await funcionarioPostgresRepository.findFisrt({ identificacao });\r\n\r\n      if (!existeFuncionario) {\r\n        errors.push({ identificacao, descricao: `Funcionário não encontrado pela identificacao ${identificacao}` });\r\n\r\n        continue;\r\n      }\r\n\r\n      let funcionarios_afastadaos: {\r\n        identificacao: string;\r\n        inicio: Date;\r\n        fim: Date | undefined;\r\n        total: number;\r\n        funcionarioId: number;\r\n        userName: string;\r\n        status: {\r\n          id: number;\r\n          nome: string;\r\n        };\r\n      } = {\r\n        identificacao,\r\n        inicio: new Date(`${inicioAfastamento.slice(0, 4)}-${inicioAfastamento.slice(4, 6)}-${inicioAfastamento.slice(6, 8)}`),\r\n        fim: !fimAfastamento\r\n          ? undefined\r\n          : new Date(`${fimAfastamento.slice(0, 4)}-${fimAfastamento.slice(4, 6)}-${fimAfastamento.slice(6, 8)}`),\r\n        total: Number(totalAfastamento),\r\n        funcionarioId: existeFuncionario.id,\r\n        userName: (req?.body?.userName || \"\").toUpperCase(),\r\n        status: {\r\n          id: Number(cadStatus),\r\n          nome: descricaoStatus.toUpperCase(),\r\n        },\r\n      };\r\n\r\n      if (funcionarios_afastadaos.identificacao !== \"\") {\r\n        await afastamentoRepository.add(funcionarios_afastadaos);\r\n      }\r\n    }\r\n\r\n    return res.json({ message: \"Arquivo importado com sucesso\", errors });\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return res.send(error).status(400);\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { AddAfastados, AddAfastadosUpasertmodel } from \"../../../../domain/usecases/add-afastados\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class AfastamentoRepository implements AddAfastados {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async add(input: AddAfastadosUpasertmodel): Promise<boolean> {\r\n    try {\r\n      const savedAfastamento = await this.prisma.funcionarios_afastados.upsert({\r\n        where: {\r\n          inicio_funcionarioId_statusId: {\r\n            funcionarioId: input.funcionarioId,\r\n            inicio: input.inicio,\r\n            statusId: input.status.id,\r\n          },\r\n        },\r\n        create: {\r\n          inicio: input.inicio,\r\n          total: input.total,\r\n          fim: input.fim,\r\n          userName: input.userName,\r\n          funcionarios_afastados_status: {\r\n            connectOrCreate: {\r\n              where: { id: input.status.id },\r\n              create: { id: input.status.id, nome: input.status.nome },\r\n            },\r\n          },\r\n          funcionario: { connect: { id: input.funcionarioId } },\r\n        },\r\n        update: {\r\n          inicio: input.inicio,\r\n          fim: input.fim,\r\n          total: input.total,\r\n          funcionario: { connect: { id: input.funcionarioId } },\r\n          userName: input.userName,\r\n          funcionarios_afastados_status: {\r\n            connectOrCreate: {\r\n              where: { nome: input.status.nome },\r\n              create: { id: input.status.id, nome: input.status.nome },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return !!savedAfastamento;\r\n    } catch (error) {\r\n      console.error(\"Erro ao criar afastamento:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { AddCartaoUpsertModel, AddCartoes } from \"../../../../domain/usecases/add-cartao\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class CartaoPostgresRepository implements AddCartoes {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async upsert(input: AddCartaoUpsertModel): Promise<boolean> {\r\n    const saved = await this.prisma.cartao.upsert({\r\n      create: {\r\n        referencia: input.referencia,\r\n        saldoAnterior100: input.saldoAnterior100,\r\n        saldoAnterior60: input.saldoAnterior60,\r\n        funcionarioId: input.funcionarioId,\r\n        statusId: input.status.id,\r\n        userName: input.userName,\r\n      },\r\n      update: {\r\n        referencia: input.referencia,\r\n        saldoAnterior100: input.saldoAnterior100,\r\n        saldoAnterior60: input.saldoAnterior60,\r\n        funcionarioId: input.funcionarioId,\r\n        statusId: input.status.id,\r\n        userName: input.userName,\r\n      },\r\n      where: { funcionarioId_referencia: { referencia: input.referencia, funcionarioId: input.funcionarioId } },\r\n    });\r\n\r\n    for (const dia of input.dias) {\r\n      await this.prisma.cartao_dia.upsert({\r\n        where: { cartaoId_data: { cartaoId: saved.id, data: dia.data } },\r\n        create: {\r\n          cargaHor: dia.cargaHor,\r\n          cargaHorariaCompleta: dia.cargaHorariaCompleta,\r\n          cargaHorPrimeiroPeriodo: dia.cargaHorPrimeiroPeriodo,\r\n          cargaHorSegundoPeriodo: dia.cargaHorSegundoPeriodo,\r\n          data: dia.data,\r\n          periodoDescanso: dia.periodoDescanso,\r\n          cargaHorariaNoturna: dia.cargaHorNoturna,\r\n          cartao_dia_status: {\r\n            connectOrCreate: {\r\n              create: { id: dia.status.id, nome: dia.status.descricao },\r\n              where: { id: dia.status.id },\r\n            },\r\n          },\r\n          cartao: { connect: { id: saved.id } },\r\n        },\r\n        update: {\r\n          cargaHor: dia.cargaHor,\r\n          cargaHorariaCompleta: dia.cargaHorariaCompleta,\r\n          cargaHorPrimeiroPeriodo: dia.cargaHorPrimeiroPeriodo,\r\n          cargaHorSegundoPeriodo: dia.cargaHorSegundoPeriodo,\r\n          data: dia.data,\r\n          periodoDescanso: dia.periodoDescanso,\r\n          cargaHorariaNoturna: dia.cargaHorNoturna,\r\n          cartao_dia_status: {\r\n            connectOrCreate: {\r\n              create: { id: dia.status.id, nome: dia.status.descricao },\r\n              where: { id: dia.status.id },\r\n            },\r\n          },\r\n          cartao: { connect: { id: saved.id } },\r\n        },\r\n      });\r\n    }\r\n\r\n    return Boolean(saved);\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { AddFuncionarioUpsertModel } from \"@domain/usecases/funcionario\";\r\n\r\nimport { FuncionarioRepository } from \"../../../../data/usecase/funcionario/funcionario-repository\";\r\nimport { prisma } from \"../../../database/Prisma\";\r\n\r\nexport class FuncionarioPostgresRepository implements FuncionarioRepository {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async upsert(funcionario: AddFuncionarioUpsertModel): Promise<boolean> {\r\n    const saveFuncionario = await this.prisma.funcionario.upsert({\r\n      where: {\r\n        identificacao: funcionario.identificacao,\r\n      },\r\n      create: {\r\n        dataAdmissao: funcionario.dataAdmissao,\r\n        dataDemissao: funcionario.dataDemissao,\r\n        dataNascimento: funcionario.dataNascimento,\r\n        filial: funcionario.filial,\r\n        identificacao: funcionario.identificacao,\r\n        nome: funcionario.nome,\r\n        centro_custo: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.centroCusto.nome },\r\n            where: { nome: funcionario.centroCusto.nome },\r\n          },\r\n        },\r\n        funcao: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.funcao.nome },\r\n            where: { nome: funcionario.funcao.nome },\r\n          },\r\n        },\r\n        turno: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.turno.nome, cod_turno: funcionario.turno.cod_turno },\r\n            where: { id: funcionario.turno.id, cod_turno: funcionario.turno.cod_turno },\r\n          },\r\n        },\r\n        contatos: funcionario.contato\r\n          ? {\r\n              connectOrCreate: {\r\n                where: { numero: funcionario.contato.numero },\r\n                create: { numero: funcionario.contato.numero },\r\n              },\r\n            }\r\n          : undefined,\r\n        emails: funcionario.email\r\n          ? {\r\n              connectOrCreate: {\r\n                create: { nome: funcionario.email.nome },\r\n                where: { nome: funcionario.email.nome },\r\n              },\r\n            }\r\n          : undefined,\r\n        localidade: {\r\n          connectOrCreate: {\r\n            where: { codigo: funcionario.localidade.codigo },\r\n            create: { codigo: funcionario.localidade.codigo, nome: funcionario.localidade.nome },\r\n          },\r\n        },\r\n        userName: funcionario.userName,\r\n      },\r\n      update: {\r\n        dataAdmissao: funcionario.dataAdmissao,\r\n        dataDemissao: funcionario.dataDemissao,\r\n        dataNascimento: funcionario.dataNascimento,\r\n        filial: funcionario.filial,\r\n        identificacao: funcionario.identificacao,\r\n        nome: funcionario.nome,\r\n        centro_custo: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.centroCusto.nome },\r\n            where: { nome: funcionario.centroCusto.nome },\r\n          },\r\n        },\r\n        funcao: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.funcao.nome },\r\n            where: { nome: funcionario.funcao.nome },\r\n          },\r\n        },\r\n        turno: {\r\n          connectOrCreate: {\r\n            create: { nome: funcionario.turno.nome, cod_turno: funcionario.turno.cod_turno },\r\n            where: { id: funcionario.turno.id, cod_turno: funcionario.turno.cod_turno },\r\n          },\r\n        },\r\n        contatos: funcionario.contato\r\n          ? {\r\n              connectOrCreate: {\r\n                where: { numero: funcionario.contato.numero },\r\n                create: { numero: funcionario.contato.numero },\r\n              },\r\n            }\r\n          : undefined,\r\n        emails: funcionario.email\r\n          ? {\r\n              connectOrCreate: {\r\n                create: { nome: funcionario.email.nome },\r\n                where: { nome: funcionario.email.nome },\r\n              },\r\n            }\r\n          : undefined,\r\n        userName: funcionario.userName,\r\n      },\r\n    });\r\n\r\n    await prisma.endereco.upsert({\r\n      where: { funcionarioId: saveFuncionario.id },\r\n      create: {\r\n        bairro: funcionario.endereco.bairro,\r\n        cep: funcionario.endereco.cep,\r\n        cidade: funcionario.endereco.cidade,\r\n        complemento: funcionario.endereco.complemento,\r\n        estado: funcionario.endereco.estado,\r\n        numero: funcionario.endereco.numero,\r\n        rua: funcionario.endereco.rua,\r\n        funcionarioId: saveFuncionario.id,\r\n      },\r\n      update: {\r\n        bairro: funcionario.endereco.bairro,\r\n        cep: funcionario.endereco.cep,\r\n        cidade: funcionario.endereco.cidade,\r\n        complemento: funcionario.endereco.complemento,\r\n        estado: funcionario.endereco.estado,\r\n        numero: funcionario.endereco.numero,\r\n        rua: funcionario.endereco.rua,\r\n      },\r\n    });\r\n\r\n    return Boolean(saveFuncionario);\r\n  }\r\n\r\n  public async findFisrt(input: { identificacao: string }): Promise<{ id: number } | undefined> {\r\n    const result = await this.prisma.funcionario.findFirst({ where: { identificacao: input.identificacao } });\r\n\r\n    if (!result) return undefined;\r\n\r\n    return {\r\n      id: result.id,\r\n    };\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { prisma } from \"@infra/database/Prisma\";\r\nimport { AddGrupoTrabalhoUpersetModel } from \"@domain/usecases/grupo-trabalho\";\r\n\r\nimport { GrupoTrabalhoRepository } from \"../../../../data/usecase/grupo-trabalho/grupo-trabalho-repository\";\r\n\r\nexport class GrupoDeTrabalhoRepositoryPrisma implements GrupoTrabalhoRepository {\r\n  private prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  public async upsert(grupo: AddGrupoTrabalhoUpersetModel): Promise<boolean> {\r\n    const saveGrupo = await this.prisma.grupo_trabalho.upsert({\r\n      where: {\r\n        id: (grupo.id = 0),\r\n      },\r\n      create: {\r\n        cod_turno: grupo.cod_turno,\r\n        descri_turno: grupo.descri_turno,\r\n        dia_semana: grupo.dia_semana,\r\n        hora_1_entrada: grupo.hora_1_entrada,\r\n        hora_1_saida: grupo.hora_1_saida,\r\n        hora_2_entrada: grupo.hora_2_entrada,\r\n        hora_2_saida: grupo.hora_2_saida,\r\n        hora_3_entrada: grupo.hora_3_entrada,\r\n        hora_3_saida: grupo.hora_3_saida,\r\n        hora_4_entrada: grupo.hora_4_entrada,\r\n        hora_4_saida: grupo.hora_4_saida,\r\n        status_turno: grupo.status_turno,\r\n        tipo_dia: grupo.tipo_dia,\r\n        total_horas_1_periodo: grupo.total_horas_1_periodo,\r\n        total_horas_2_periodo: grupo.total_horas_2_periodo,\r\n        total_horas_3_periodo: grupo.total_horas_3_periodo,\r\n        total_horas_4_periodo: grupo.total_horas_4_periodo,\r\n        total_horas_1_intervalo: grupo.total_horas_1_intervalo,\r\n        total_horas_2_intervalo: grupo.total_horas_2_intervalo,\r\n        total_horas_3_intervalo: grupo.total_horas_3_intervalo,\r\n        total_horas_dia: grupo.total_horas_dia,\r\n        total_horas_intervalo: grupo.total_horas_intervalo,\r\n        total_horas_trabalhadas: grupo.total_horas_trabalhadas,\r\n        userName: grupo.userName,\r\n      },\r\n      update: {\r\n        cod_turno: grupo.cod_turno,\r\n        descri_turno: grupo.descri_turno,\r\n        dia_semana: grupo.dia_semana,\r\n        hora_1_entrada: grupo.hora_1_entrada,\r\n        hora_1_saida: grupo.hora_1_saida,\r\n        hora_2_entrada: grupo.hora_2_entrada,\r\n        hora_2_saida: grupo.hora_2_saida,\r\n        hora_3_entrada: grupo.hora_3_entrada,\r\n        hora_3_saida: grupo.hora_3_saida,\r\n        hora_4_entrada: grupo.hora_4_entrada,\r\n        hora_4_saida: grupo.hora_4_saida,\r\n        status_turno: grupo.status_turno,\r\n        tipo_dia: grupo.tipo_dia,\r\n        total_horas_1_periodo: grupo.total_horas_1_periodo,\r\n        total_horas_2_periodo: grupo.total_horas_2_periodo,\r\n        total_horas_3_periodo: grupo.total_horas_3_periodo,\r\n        total_horas_4_periodo: grupo.total_horas_4_periodo,\r\n        total_horas_1_intervalo: grupo.total_horas_1_intervalo,\r\n        total_horas_2_intervalo: grupo.total_horas_2_intervalo,\r\n        total_horas_3_intervalo: grupo.total_horas_3_intervalo,\r\n        total_horas_dia: grupo.total_horas_dia,\r\n        total_horas_intervalo: grupo.total_horas_intervalo,\r\n        total_horas_trabalhadas: grupo.total_horas_trabalhadas,\r\n        userName: grupo.userName,\r\n      },\r\n    });\r\n    return Boolean(saveGrupo);\r\n  }\r\n}\r\n","import moment from \"moment\";\r\n\r\nexport function calcularTotalMinutos(entrada: string, saida: string, extra?: string): number {\r\n  const [entradaHoras, entradaMinutos] = entrada.split(\":\").map(Number);\r\n  const [saidaHoras, saidaMinutos] = saida.split(\":\").map(Number);\r\n\r\n  let totalMinutosEntrada = entradaHoras * 60 + entradaMinutos;\r\n  let totalMinutosSaida = saidaHoras * 60 + saidaMinutos;\r\n\r\n  if (extra && extra !== \"\") {\r\n    const [extraHoras, extraMinutos] = extra.split(\":\").map(Number);\r\n    totalMinutosSaida += extraHoras * 60 + extraMinutos;\r\n  }\r\n  return totalMinutosSaida - totalMinutosEntrada;\r\n}\r\n\r\nexport function arredondarParteDecimalHoras(numero: number): number {\r\n  const inteiro = Math.floor(numero); // Obtém a parte inteira do número\r\n  const decimal = numero - inteiro; // Obtém a parte decimal do número\r\n  const terceiraCasa = Math.floor((decimal * 1000) % 10); // Obtém a terceira casa decimal\r\n\r\n  // Verifica se a terceira casa decimal é maior ou igual a 6\r\n  if (terceiraCasa >= 6) {\r\n    // Arredonda para cima a segunda casa decimal\r\n    return Math.round(numero * 100) / 100;\r\n  } else {\r\n    // Trunca para duas casas decimais\r\n    return Math.floor(numero * 100) / 100;\r\n  }\r\n}\r\n\r\nexport function arredondarParteDecimal(numero: number): number {\r\n  const inteiro = Math.floor(numero); // Obtém a parte inteira do número\r\n  const decimal = numero - inteiro; // Obtém a parte decimal do número\r\n\r\n  // Se a parte decimal for maior ou igual a 0.6, arredonde para cima\r\n  if (decimal >= 0.6) {\r\n    return inteiro + 1; // Adiciona 1 para arredondar para cima\r\n  } else {\r\n    return inteiro; // Mantém o inteiro, arredondando para baixo\r\n  }\r\n}\r\n\r\nexport const BuscarHorarioNortunoEmMinutos = (data: moment.Moment, inicial: moment.Moment, final: moment.Moment): number => {\r\n  let difMinNotuno = 0;\r\n  const inicioAdicional = moment(data).utc(false).minutes(0).seconds(0).hour(22);\r\n  const finalAdicional = moment(data).utc(false).minutes(0).seconds(0).add(1, \"d\").hour(5);\r\n\r\n  //Quando Entrada e saida estão no adicional\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional)) {\r\n    if (inicial.isAfter(inicioAdicional)) {\r\n      if (final.isBefore(finalAdicional)) {\r\n        difMinNotuno = final.diff(inicial, \"minutes\");\r\n      }\r\n    }\r\n  }\r\n\r\n  //Quando a saida está entre o adicional e a entrada está antes\r\n  if (final.isBetween(inicioAdicional, finalAdicional) && inicial?.isBefore(inicioAdicional)) {\r\n    difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  //Quando a entrada está entre o adicional e a saida depois\r\n  if (inicial.isBetween(inicioAdicional, finalAdicional) && final?.isAfter(finalAdicional)) {\r\n    difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n  }\r\n\r\n  //Quando inicio e final do adicional estão entre entrada e saida e entrada é antes do inicio do adicional e a saída é depois do fim do adicional\r\n  if (\r\n    inicioAdicional.isBetween(inicial, final) &&\r\n    finalAdicional.isBetween(inicial, final) &&\r\n    inicial.isBefore(inicioAdicional) &&\r\n    final.isAfter(finalAdicional)\r\n  ) {\r\n    difMinNotuno = finalAdicional.diff(inicioAdicional, \"minutes\");\r\n  }\r\n\r\n  if (inicial.isSame(inicioAdicional)) {\r\n    if (final.isBefore(finalAdicional)) {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    } else {\r\n      difMinNotuno = finalAdicional.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  if (final.isSame(finalAdicional)) {\r\n    if (inicial.isBefore(inicioAdicional)) {\r\n      difMinNotuno = final.diff(inicioAdicional, \"minutes\");\r\n    } else {\r\n      difMinNotuno = final.diff(inicial, \"minutes\");\r\n    }\r\n  }\r\n\r\n  return difMinNotuno;\r\n};\r\n"],"mappings":"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","names":["import_express","app","import_express","route","route","import_moment","import_moment","arredondarParteDecimalHoras","arredondarParteDecimal","arredondarParteDecimal","import_moment","moment","arredondarParteDecimal","moment","route","route","route","import_client","prisma","fs","route","import_fs","import_client","prisma","ajustarFusoHorario","formatarTempo","formatarData","fs","route","route","route","route","route","route","route","arredondarParteDecimalHoras","route","route","route","route","route","import_moment","FuncionarioPostgresRepository","import_moment","moment","FuncionarioPostgresRepository","moment","multer","route","app","Express","cors"]}